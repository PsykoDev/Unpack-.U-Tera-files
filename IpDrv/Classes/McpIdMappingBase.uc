/*******************************************************************************
 * McpIdMappingBase generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class McpIdMappingBase extends McpServiceBase
    abstract
    config(Engine);

struct McpIdMapping
{
    var string McpId;
    var string ExternalId;
    var string ExternalType;
    var string ExternalToken;

    structdefaultproperties
    {
        McpId=""
        ExternalId=""
        ExternalType=""
        ExternalToken=""
    }
};

var config string McpIdMappingClassName;
var delegate<OnAddMappingComplete> __OnAddMappingComplete__Delegate;
var delegate<OnQueryMappingsComplete> __OnQueryMappingsComplete__Delegate;

static final function McpIdMappingBase CreateInstance()
{
    local class<McpIdMappingBase> McpIdMappingBaseClass;
    local McpIdMappingBase NewInstance;

    McpIdMappingBaseClass = class<McpIdMappingBase>(DynamicLoadObject(default.McpIdMappingClassName, class'Class'));
    // End:0x76
    if(McpIdMappingBaseClass != none)
    {
        NewInstance = new McpIdMappingBaseClass;
        NewInstance.Init();
    }
    return NewInstance;
    //return ReturnValue;    
}

function AddMapping(string McpId, string ExternalId, string ExternalType, optional string ExternalToken)
{
    //return;    
}

delegate OnAddMappingComplete(string McpId, string ExternalId, string ExternalType, bool bWasSuccessful, string Error)
{
    //return;    
}

function QueryMappings(string McpId, const out array<string> ExternalIds, string ExternalType)
{
    //return;    
}

delegate OnQueryMappingsComplete(string ExternalType, bool bWasSuccessful, string Error)
{
    //return;    
}

function GetIdMappings(string ExternalType, out array<McpIdMapping> IDMappings)
{
    //return;    
}

defaultproperties
{
    McpIdMappingClassName="IpDrv.McpIdMappingManager"
}