/*******************************************************************************
 * McpGroupsBase generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class McpGroupsBase extends McpServiceBase
    abstract
    config(Engine);

enum EMcpGroupAcceptState
{
    MGAS_Error,
    MGAS_Pending,
    MGAS_Accepted,
    MGAS_MAX
};

enum EMcpGroupAccessLevel
{
    MGAL_Owner,
    MGAL_Member,
    MGAL_Public,
    MGAL_MAX
};

struct McpGroupMember
{
    var string MemberId;
    var McpGroupsBase.EMcpGroupAcceptState AcceptState;

    structdefaultproperties
    {
        MemberId=""
        AcceptState=EMcpGroupAcceptState.MGAS_Error
    }
};

struct McpGroup
{
    var string OwnerId;
    var string GroupID;
    var string GroupName;
    var McpGroupsBase.EMcpGroupAccessLevel AccessLevel;
    var array<McpGroupMember> Members;

    structdefaultproperties
    {
        OwnerId=""
        GroupID=""
        GroupName=""
        AccessLevel=EMcpGroupAccessLevel.MGAL_Owner
        Members=none
    }
};

struct McpGroupList
{
    var string RequesterId;
    var array<McpGroup> Groups;

    structdefaultproperties
    {
        RequesterId=""
        Groups=none
    }
};

var config string McpGroupsManagerClassName;
var delegate<OnCreateGroupComplete> __OnCreateGroupComplete__Delegate;
var delegate<OnDeleteGroupComplete> __OnDeleteGroupComplete__Delegate;
var delegate<OnQueryGroupsComplete> __OnQueryGroupsComplete__Delegate;
var delegate<OnQueryGroupMembersComplete> __OnQueryGroupMembersComplete__Delegate;
var delegate<OnAddGroupMembersComplete> __OnAddGroupMembersComplete__Delegate;
var delegate<OnRemoveGroupMembersComplete> __OnRemoveGroupMembersComplete__Delegate;
var delegate<OnDeleteAllGroupsComplete> __OnDeleteAllGroupsComplete__Delegate;
var delegate<OnQueryGroupInvitesComplete> __OnQueryGroupInvitesComplete__Delegate;
var delegate<OnAcceptGroupInviteComplete> __OnAcceptGroupInviteComplete__Delegate;

static final function McpGroupsBase CreateInstance()
{
    local class<McpGroupsBase> McpGroupsManagerClass;
    local McpGroupsBase NewInstance;

    McpGroupsManagerClass = class<McpGroupsBase>(DynamicLoadObject(default.McpGroupsManagerClassName, class'Class'));
    // End:0x76
    if(McpGroupsManagerClass != none)
    {
        NewInstance = new McpGroupsManagerClass;
        NewInstance.Init();
    }
    return NewInstance;
    //return ReturnValue;    
}

function CreateGroup(string OwnerId, string GroupName)
{
    //return;    
}

delegate OnCreateGroupComplete(McpGroup Group, bool bWasSuccessful, string Error)
{
    //return;    
}

function DeleteGroup(string UniqueUserId, string GroupID)
{
    //return;    
}

delegate OnDeleteGroupComplete(string GroupID, bool bWasSuccessful, string Error)
{
    //return;    
}

function QueryGroups(string RequesterId)
{
    //return;    
}

delegate OnQueryGroupsComplete(string UserId, bool bWasSuccessful, string Error)
{
    //return;    
}

function GetGroupList(string UserId, out McpGroupList GroupList)
{
    //return;    
}

function QueryGroupMembers(string UniqueUserId, string GroupID)
{
    //return;    
}

delegate OnQueryGroupMembersComplete(string GroupID, bool bWasSuccessful, string Error)
{
    //return;    
}

function GetGroupMembers(string GroupID, out array<McpGroupMember> GroupMembers)
{
    //return;    
}

function AddGroupMembers(string OwnerId, string GroupID, const out array<string> MemberIds, bool bRequiresAcceptance)
{
    //return;    
}

delegate OnAddGroupMembersComplete(string GroupID, bool bWasSuccessful, string Error)
{
    //return;    
}

function RemoveGroupMembers(string OwnerId, string GroupID, const out array<string> MemberIds)
{
    //return;    
}

delegate OnRemoveGroupMembersComplete(string GroupID, bool bWasSuccessful, string Error)
{
    //return;    
}

function DeleteAllGroups(string OwnerId)
{
    //return;    
}

delegate OnDeleteAllGroupsComplete(string RequesterId, bool bWasSuccessful, string Error)
{
    //return;    
}

function QueryGroupInvites(string UniqueUserId)
{
    //return;    
}

delegate OnQueryGroupInvitesComplete(bool bWasSuccessful, string Error)
{
    //return;    
}

function GetGroupInviteList(string UserId, out McpGroupList InviteList)
{
    //return;    
}

function AcceptGroupInvite(string UniqueUserId, string GroupID, bool bShouldAccept)
{
    //return;    
}

delegate OnAcceptGroupInviteComplete(string GroupID, bool bWasSuccessful, string Error)
{
    //return;    
}

defaultproperties
{
    McpGroupsManagerClassName="IpDrv.McpGroupsManager"
}