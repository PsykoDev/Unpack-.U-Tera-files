/*******************************************************************************
 * OnlineImageDownloaderWeb generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class OnlineImageDownloaderWeb extends Object
    config(Engine);

enum EOnlineImageDownloadState
{
    PIDS_NotStarted,
    PIDS_Downloading,
    PIDS_Succeeded,
    PIDS_Failed,
    PIDS_MAX
};

struct OnlineImageDownload
{
    var string URL;
    var HttpRequestInterface HTTPRequest;
    var OnlineImageDownloaderWeb.EOnlineImageDownloadState State;
    var bool bPendingRemoval;
    var Texture2DDynamic Texture;

    structdefaultproperties
    {
        URL=""
        HTTPRequest=none
        State=EOnlineImageDownloadState.PIDS_NotStarted
        bPendingRemoval=false
        Texture=none
    }
};

var array<OnlineImageDownload> DownloadImages;
var config int MaxSimultaneousDownloads;
var delegate<OnOnlineImageDownloaded> __OnOnlineImageDownloaded__Delegate;

delegate OnOnlineImageDownloaded(OnlineImageDownload CachedEntry)
{
    //return;    
}

function Texture GetOnlineImageTexture(string URL)
{
    local int FoundIdx;

    FoundIdx = DownloadImages.Find('URL', URL);
    // End:0x96
    if((FoundIdx != -1) && DownloadImages[FoundIdx].State == 2)
    {
        return DownloadImages[FoundIdx].Texture;
    }
    return none;
    //return ReturnValue;    
}

function RequestOnlineImages(array<string> URLs)
{
    local string URL;
    local int FoundIdx, Idx;

    Idx = 0;
    J0x0B:
    // End:0x93 [Loop If]
    if(Idx < DownloadImages.Length)
    {
        DownloadImages[Idx].bPendingRemoval = URLs.Find(DownloadImages[Idx].URL) == -1;
        ++ Idx;
        // [Loop Continue]
        goto J0x0B;
    }
    // End:0x292
    foreach URLs(URL,)
    {
        FoundIdx = DownloadImages.Find('URL', URL);
        // End:0x10F
        if(FoundIdx != -1)
        {
            OnOnlineImageDownloaded(DownloadImages[FoundIdx]);
            // End:0x291
            continue;
        }
        FoundIdx = DownloadImages.Find('bPendingRemoval', true);
        // End:0x16F
        if(FoundIdx == -1)
        {
            FoundIdx = DownloadImages.Length;
            DownloadImages.Length = DownloadImages.Length + 1;
        }
        DownloadImages[FoundIdx].URL = URL;
        DownloadImages[FoundIdx].HTTPRequest = none;
        DownloadImages[FoundIdx].State = 0;
        DownloadImages[FoundIdx].bPendingRemoval = false;
        // End:0x291
        if(DownloadImages[FoundIdx].Texture == none)
        {
            DownloadImages[FoundIdx].Texture = class'Texture2DDynamic'.static.Create(50, 50);
        }        
    }    
    Idx = 0;
    J0x29E:
    // End:0x305 [Loop If]
    if(Idx < DownloadImages.Length)
    {
        // End:0x2F7
        if(DownloadImages[Idx].bPendingRemoval)
        {
            DownloadImages.Remove(-- Idx, 1);
        }
        ++ Idx;
        // [Loop Continue]
        goto J0x29E;
    }
    DownloadNextImage();
    //return;    
}

function int GetNumPendingDownloads()
{
    local int Idx, Count;

    Idx = 0;
    J0x0B:
    // End:0x6D [Loop If]
    if(Idx < DownloadImages.Length)
    {
        // End:0x5F
        if(DownloadImages[Idx].State == 1)
        {
            ++ Count;
        }
        ++ Idx;
        // [Loop Continue]
        goto J0x0B;
    }
    return Count;
    //return ReturnValue;    
}

function ClearDownloads(array<string> URLs)
{
    local int Idx;

    Idx = 0;
    J0x0B:
    // End:0x85 [Loop If]
    if(Idx < DownloadImages.Length)
    {
        // End:0x77
        if(URLs.Find(DownloadImages[Idx].URL) != -1)
        {
            DownloadImages.Remove(-- Idx, 1);
        }
        ++ Idx;
        // [Loop Continue]
        goto J0x0B;
    }
    //return;    
}

function ClearAllDownloads()
{
    DownloadImages.Length = 0;
    //return;    
}

private final function DownloadNextImage()
{
    local int Idx, PendingDownloads;

    PendingDownloads = GetNumPendingDownloads();
    Idx = 0;
    J0x1F:
    // End:0x265 [Loop If]
    if(Idx < DownloadImages.Length)
    {
        // End:0x51
        if(PendingDownloads >= MaxSimultaneousDownloads)
        {
            // [Explicit Break]
            goto J0x265;
        }
        // End:0x257
        if(DownloadImages[Idx].State == 0)
        {
            DownloadImages[Idx].HTTPRequest = class'HttpFactory'.static.CreateRequest();
            // End:0x257
            if(DownloadImages[Idx].HTTPRequest != none)
            {
                DownloadImages[Idx].HTTPRequest.SetVerb("GET");
                DownloadImages[Idx].HTTPRequest.SetURL(DownloadImages[Idx].URL);
                DownloadImages[Idx].HTTPRequest.SetProcessRequestCompleteDelegate(OnDownloadComplete);
                // End:0x257
                if(DownloadImages[Idx].HTTPRequest.ProcessRequest())
                {
                    DownloadImages[Idx].State = 1;
                    ++ PendingDownloads;
                }
            }
        }
        ++ Idx;
        J0x265:
        // [Loop Continue]
        goto J0x1F;
    }
    //return;    
}

private final function OnDownloadComplete(HttpRequestInterface OriginalRequest, HttpResponseInterface Response, bool bDidSucceed)
{
    local int FoundIdx;
    local array<byte> JPEGData;

    FoundIdx = DownloadImages.Find('HTTPRequest', OriginalRequest);
    // End:0x1D7
    if(FoundIdx != -1)
    {
        // End:0x160
        if(((bDidSucceed && Response != none) && Response.GetResponseCode() == 200) && InStr(Response.GetHeader("Content-Type"), "jpeg", false, true) != -1)
        {
            DownloadImages[FoundIdx].State = 2;
            Response.GetContent(JPEGData);
            DownloadImages[FoundIdx].Texture.UpdateMipFromJPEG(0, JPEGData);
        }
        // End:0x189
        else
        {
            DownloadImages[FoundIdx].State = 3;
        }
        OnOnlineImageDownloaded(DownloadImages[FoundIdx]);
        DownloadImages[FoundIdx].HTTPRequest = none;
    }
    DownloadNextImage();
    //return;    
}

function DebugDraw(Canvas Canvas)
{
    local float PosX, PosY;
    local int Idx;

    PosX = 0.0;
    PosY = 0.0;
    Idx = 0;
    J0x29:
    // End:0x2E3 [Loop If]
    if(Idx < DownloadImages.Length)
    {
        // End:0x253
        if(DownloadImages[Idx].State == 2)
        {
            Canvas.SetDrawColor(255, 255, 255, 255);
            Canvas.SetPos(PosX, PosY);
            Canvas.DrawTexture(DownloadImages[Idx].Texture, 1.0);
            Canvas.SetDrawColor(0, 255, 0, 255);
            Canvas.SetPos(PosX, PosY);
            Canvas.DrawBox(float(DownloadImages[Idx].Texture.SizeX), float(DownloadImages[Idx].Texture.SizeY));
            PosY += float(DownloadImages[Idx].Texture.SizeY);
        }
        // End:0x28B
        else
        {
            Canvas.DrawBox(50.0, 50.0);
            PosY += float(50);
        }
        // End:0x2D5
        if(PosY > Canvas.ClipY)
        {
            PosY = 0.0;
            PosX += float(50);
        }
        ++ Idx;
        // [Loop Continue]
        goto J0x29;
    }
    //return;    
}

defaultproperties
{
    MaxSimultaneousDownloads=8
}