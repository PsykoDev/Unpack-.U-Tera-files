/*******************************************************************************
 * FacebookWindows generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class FacebookWindows extends FacebookIntegration
    transient
    native
    config(Engine);

var private native const noexport Pointer VfTable_FTickableObject;
var config string PreviousAccessToken;
var private native const transient Pointer ChildProcHandle;

// Export UFacebookWindows::execInit(FFrame&, void* const)
native function bool Init();

// Export UFacebookWindows::execAuthorize(FFrame&, void* const)
native function bool Authorize();

// Export UFacebookWindows::execIsAuthorized(FFrame&, void* const)
native function bool IsAuthorized();

// Export UFacebookWindows::execDisconnect(FFrame&, void* const)
native function Disconnect();

function FacebookRequest(string GraphRequest)
{
    class'HttpFactory'.static.CreateRequest().SetURL((("https://graph.facebook.com/" @ GraphRequest) @ "?access_token=") $ AccessToken).SetVerb("GET").SetProcessRequestCompleteDelegate(FacebookRequestCallback).ProcessRequest();
    //return;    
}

// Export UFacebookWindows::execProcessFacebookRequest(FFrame&, void* const)
native function ProcessFacebookRequest(string Payload, int ResponseCode);

function FacebookRequestCallback(HttpRequestInterface OriginalRequest, HttpResponseInterface Response, bool bDidSucceed)
{
    local string Payload;

    // End:0x36
    if(bDidSucceed)
    {
        Payload = Response.GetContentAsString();
    }
    ProcessFacebookRequest(Payload, ((bDidSucceed) ? Response.GetResponseCode() : 400));
    //return;    
}

private final event RequestFacebookMeInfo()
{
    UserName = "";
    UserId = "";
    class'HttpFactory'.static.CreateRequest().SetURL("https://graph.facebook.com/me?access_token=" $ AccessToken).SetHeader("Content-Type", "application/json").SetVerb("GET").SetProcessRequestCompleteDelegate(OnFacebookMeRequestComplete).ProcessRequest();
    //return;    
}

private final function OnFacebookMeRequestComplete(HttpRequestInterface OriginalRequest, HttpResponseInterface Response, bool bDidSucceed)
{
    local string JsonPayload;
    local JsonObject ParsedJson;
    local PlatformInterfaceDelegateResult DelegateResult;

    // End:0x27D
    if(bDidSucceed && Response.GetResponseCode() == 200)
    {
        JsonPayload = Response.GetContentAsString();
        LogInternal((((((((("(" $ string(Name)) $ ") FacebookWindows::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "A") @ "") $ "JsonPayload=") $ JsonPayload);
        // End:0x1FA
        if(Len(JsonPayload) > 0)
        {
            DelegateResult.bSuccessful = true;
            ParsedJson = class'JsonObject'.static.DecodeJson(JsonPayload);
            // End:0x196
            if(ParsedJson != none)
            {
                UserName = ParsedJson.GetStringValue("name");
                UserId = ParsedJson.GetStringValue("id");
            }
            // End:0x1F7
            else
            {
                LogInternal((((((("(" $ string(Name)) $ ") FacebookWindows::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "A") @ "Failed to parse JSON");
            }
        }
        // End:0x25C
        else
        {
            LogInternal((((((("(" $ string(Name)) $ ") FacebookWindows::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "A") @ "JSON payload is empty");
        }
        CallDelegates(0, DelegateResult);
        RequestFacebookFriends();
    }
    // End:0x3CE
    else
    {
        LogInternal((((((((("(" $ string(Name)) $ ") FacebookWindows::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "A") @ "Failed to get valid response: ") $ " code=") $ string(Response.GetResponseCode()));
        DelegateResult.bSuccessful = false;
        DelegateResult.Data.Type = 3;
        DelegateResult.Data.StringValue = "Failed to request user id and name";
        CallDelegates(0, DelegateResult);
    }
    //return;    
}

protected event RequestFacebookFriends()
{
    FriendsList.Length = 0;
    class'HttpFactory'.static.CreateRequest().SetURL("https://graph.facebook.com/me/friends?access_token=" $ AccessToken).SetHeader("Content-Type", "application/json").SetVerb("GET").SetProcessRequestCompleteDelegate(OnFacebookFriendsRequestComplete).ProcessRequest();
    //return;    
}

protected function OnFacebookFriendsRequestComplete(HttpRequestInterface OriginalRequest, HttpResponseInterface Response, bool bDidSucceed)
{
    local string JsonPayload;
    local JsonObject ParsedJson, FriendsJson;
    local int JsonIndex;
    local PlatformInterfaceDelegateResult DelegateResult;
    local FacebookFriend Friend;

    // End:0x3DC
    if(bDidSucceed && Response.GetResponseCode() == 200)
    {
        JsonPayload = Response.GetContentAsString();
        LogInternal((((((((("(" $ string(Name)) $ ") FacebookWindows::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "A") @ "") $ "JsonPayload=") $ JsonPayload);
        // End:0x362
        if(Len(JsonPayload) > 0)
        {
            ParsedJson = class'JsonObject'.static.DecodeJson(JsonPayload);
            // End:0x2FE
            if(ParsedJson != none)
            {
                FriendsJson = ParsedJson.GetObject("data");
                // End:0x294
                if(FriendsJson != none)
                {
                    DelegateResult.bSuccessful = true;
                    JsonIndex = 0;
                    J0x180:
                    // End:0x291 [Loop If]
                    if(JsonIndex < FriendsJson.ObjectArray.Length)
                    {
                        Friend.Name = FriendsJson.ObjectArray[JsonIndex].GetStringValue("name");
                        Friend.Id = FriendsJson.ObjectArray[JsonIndex].GetStringValue("id");
                        FriendsList.AddItem(Friend);
                        ++ JsonIndex;
                        // [Loop Continue]
                        goto J0x180;
                    }
                }
                // End:0x2FB
                else
                {
                    LogInternal((((((("(" $ string(Name)) $ ") FacebookWindows::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "A") @ "Missing data entry in JSON");
                }
            }
            // End:0x35F
            else
            {
                LogInternal((((((("(" $ string(Name)) $ ") FacebookWindows::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "A") @ "Failed to parse JSON");
            }
        }
        // End:0x3C4
        else
        {
            LogInternal((((((("(" $ string(Name)) $ ") FacebookWindows::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "A") @ "JSON payload is empty");
        }
        CallDelegates(3, DelegateResult);
    }
    // End:0x52A
    else
    {
        LogInternal((((((((("(" $ string(Name)) $ ") FacebookWindows::") $ string(GetStateName())) $ ":") $ string(GetFuncName())) @ "A") @ "Failed to get valid response: ") $ " code=") $ string(Response.GetResponseCode()));
        DelegateResult.bSuccessful = false;
        DelegateResult.Data.Type = 3;
        DelegateResult.Data.StringValue = "Failed to request friends list";
        CallDelegates(3, DelegateResult);
    }
    //return;    
}
