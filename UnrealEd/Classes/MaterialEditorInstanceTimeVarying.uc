/*******************************************************************************
 * MaterialEditorInstanceTimeVarying generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class MaterialEditorInstanceTimeVarying extends Object
    native
    collapsecategories
    hidecategories(Object);

struct native EditorParameterValueOverTime
{
    var Guid ExpressionId;
    var() bool bOverride;
    var() name ParameterName;
    /** if true, then the CycleTime is the loop time and time loops */
    var() bool bLoop;
    /** This will auto activate this param */
    var() bool bAutoActivate;
    /** this controls time normalization and the loop time */
    var() float CycleTime;
    /** if true, then the CycleTime is used to scale time so all keys are between zero and one */
    var() bool bNormalizeTime;
    /** How much time this will wait before actually firing off.  This is useful for keeping the curves being just the data for controlling the param and not a bunch of slack in the beginning (e.g. to wait N seconds then start fading) */
    var() float OffsetTime;
    /** When using OffsetTime it is nice to be able to offset from the end of the decal's lifetime (e.g. you want to fade out the decal, you want to change the color of the decal before it fades away etc.) */
    var() bool bOffsetFromEnd;

    structdefaultproperties
    {
        ExpressionId=(A=0,B=0,C=0,D=0)
        bOverride=false
        ParameterName=None
        bLoop=false
        bAutoActivate=false
        CycleTime=1.0
        bNormalizeTime=false
        OffsetTime=0.0
        bOffsetFromEnd=false
    }
};

struct native EditorVectorParameterValueOverTime extends EditorParameterValueOverTime
{
    /** This allows MITVs to have both single scalar and curve values */
    var() LinearColor ParameterValue;
    /** This will automatically be used if there are any values in this Curve */
    var() InterpCurveVector ParameterValueCurve;

    structdefaultproperties
    {
        ParameterValue=(R=0.0,G=0.0,B=0.0,A=1.0)
        CycleTime=0.0
    }
};

struct native EditorLinearColorParameterValueOverTime extends EditorParameterValueOverTime
{
    /** This allows MITVs to have both single scalar and curve values */
    var() LinearColor ParameterValue;
    /** This will automatically be used if there are any values in this Curve */
    var() InterpCurveLinearColor ParameterValueCurve;

    structdefaultproperties
    {
        ParameterValue=(R=0.0,G=0.0,B=0.0,A=1.0)
        CycleTime=0.0
    }
};

struct native EditorScalarParameterValueOverTime extends EditorParameterValueOverTime
{
    /** This allows MITVs to have both single scalar and curve values */
    var() float ParameterValue;
    /** This will automatically be used if there are any values in this Curve */
    var() InterpCurveFloat ParameterValueCurve;

    structdefaultproperties
    {
        CycleTime=0.0
    }
};

struct native EditorTextureParameterValueOverTime extends EditorParameterValueOverTime
{
    var() Texture ParameterValue;

    structdefaultproperties
    {
        CycleTime=0.0
    }
};

struct native EditorFontParameterValueOverTime extends EditorParameterValueOverTime
{
    var() Font FontValue;
    var() int FontPage;

    structdefaultproperties
    {
        CycleTime=0.0
    }
};

struct native EditorStaticSwitchParameterValueOverTime extends EditorParameterValueOverTime
{
    var() bool ParameterValue;

    structdefaultproperties
    {
        CycleTime=0.0
    }
};

struct native ComponentMaskParameterOverTime
{
    var() bool R;
    var() bool G;
    var() bool B;
    var() bool A;

    structdefaultproperties
    {
        R=false
        G=false
        B=false
        A=false
    }
};

struct native EditorStaticComponentMaskParameterValueOverTime extends EditorParameterValueOverTime
{
    var() ComponentMaskParameterOverTime ParameterValue;

    structdefaultproperties
    {
        CycleTime=0.0
    }
};

/** Physical material to use for this graphics material. Used for sounds, effects etc. */
var() PhysicalMaterial PhysMaterial;
/** Phsical material mask settings to use. */
var() PhysicalMaterialMaskSettings PhysicalMaterialMask;
var() MaterialInterface Parent;
/** causes all parameters to start playing immediately */
var() bool bAutoActivateAll;
/** LinearColor values apply to Vector Parameters allowing you to specify RGBA values */
var() array<EditorLinearColorParameterValueOverTime> LinearColorParameterValues;
var() array<EditorVectorParameterValueOverTime> VectorParameterValues;
var() array<EditorScalarParameterValueOverTime> ScalarParameterValues;
var() array<EditorTextureParameterValueOverTime> TextureParameterValues;
var() array<EditorFontParameterValueOverTime> FontParameterValues;
var() array<EditorStaticSwitchParameterValueOverTime> StaticSwitchParameterValues;
var() array<EditorStaticComponentMaskParameterValueOverTime> StaticComponentMaskParameterValues;
var MaterialInstanceTimeVarying SourceInstance;
var duplicatetransient const transient array<Guid> VisibleExpressions;
/** The Lightmass override settings for this object. */
var(Lightmass) LightmassParameterizedMaterialSettings LightmassSettings;

defaultproperties
{
    LightmassSettings=(CastShadowAsMasked=(ParameterValue=false,bOverride=false),EmissiveBoost=(ParameterValue=1.0,bOverride=false),DiffuseBoost=(ParameterValue=1.0,bOverride=false),SpecularBoost=(ParameterValue=1.0,bOverride=false),ExportResolutionScale=(ParameterValue=1.0,bOverride=false),DistanceFieldPenumbraScale=(ParameterValue=1.0,bOverride=false))
}