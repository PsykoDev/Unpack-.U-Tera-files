/*******************************************************************************
 * GameStatsDatabase generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class GameStatsDatabase extends Object
    native(GameStats)
    config(Editor);

enum GameStatsDateFilters
{
    GSDF_Today,
    GSDF_Last3Days,
    GSDF_LastWeek,
    GSDF_MAX
};

struct native SessionIndexPair
{
    var init string SessionId;
    var int Index;

    structdefaultproperties
    {
        SessionId=""
        Index=0
    }
};

struct native GameStatsSearchQuery
{
    var int StartTime;
    var int EndTime;
    var array<string> SessionIDs;
    var array<int> EventIDs;
    var array<SessionIndexPair> TeamIndices;
    var array<SessionIndexPair> PlayerIndices;

    structdefaultproperties
    {
        StartTime=0
        EndTime=0
        SessionIDs=none
        EventIDs=none
        TeamIndices=none
        PlayerIndices=none
    }
};

struct native GameSessionEntry
{
    var init const transient array<init int> AllEvents;
    var const transient array<int> GameEvents;
    var native const transient MultiMap_Mirror EventsByPlayer;
    var native const transient MultiMap_Mirror EventsByRound;
    var native const transient MultiMap_Mirror EventsByType;
    var native const transient MultiMap_Mirror EventsByTeam;

    structdefaultproperties
    {
        AllEvents=none
        GameEvents=none
    }
};

struct native IGameStatEntry
{
    var native const noexport Pointer Vtbl_IGameStatEntry;
    var init string EventName;
    var int EventID;
    var float EventTime;

    structdefaultproperties
    {
        EventName=""
        EventID=0
        EventTime=0.0
    }
};

struct native GameStatsRecordSet
{
    var init array<init int> LocalRecordSet;
    var init native array<init Pointer> RemoteRecordSet;

    structdefaultproperties
    {
        LocalRecordSet=none
    }
};

var private native const transient MultiMap_Mirror MapNameToFilenameMapping;
var private native const transient array<Pointer> AllEvents;
var private native const transient Map_Mirror AllSessions;
var private native const transient Map_Mirror SessionFilenamesBySessionID;
var private native const transient Map_Mirror SessionInfoBySessionID;
var private native const transient Map_Mirror PlayerListBySessionID;
var private native const transient Map_Mirror TeamListBySessionID;
var private native const transient Map_Mirror SupportedEventsBySessionID;
var private native const transient Map_Mirror WeaponClassesBySessionID;
var private native const transient Map_Mirror DamageClassesBySessionID;
var private native const transient Map_Mirror ProjectileClassesBySessionID;
var private native const transient Map_Mirror PawnClassesBySessionID;
var const transient array<string> AllGameTypes;
var private native const transient Pointer RemoteDB;
var config string GameStatsFileReaderClassname;
var config string GameStateClassname;

// Export UGameStatsDatabase::execInit(FFrame&, void* const)
native function Init(const string MapName, GameStatsDatabase.GameStatsDateFilters DateFilter);

// Export UGameStatsDatabase::execCacheLocalFilenames(FFrame&, void* const)
native function CacheLocalFilenames();

// Export UGameStatsDatabase::execGetGameTypes(FFrame&, void* const)
native function GetGameTypes(out array<string> GameTypes);

// Export UGameStatsDatabase::execGetSessionIDs(FFrame&, void* const)
native function GetSessionIDs(GameStatsDatabase.GameStatsDateFilters DateFilter, const string GameTypeFilter, out array<string> SessionIDs);

// Export UGameStatsDatabase::execIsSessionIDLocal(FFrame&, void* const)
native function bool IsSessionIDLocal(const string SessionId);

// Export UGameStatsDatabase::execGetSessionInfoBySessionID(FFrame&, void* const)
native function GetSessionInfoBySessionID(const string SessionId, out GameSessionInformation OutSessionInfo);

// Export UGameStatsDatabase::execGetPlayersListBySessionID(FFrame&, void* const)
native function GetPlayersListBySessionID(const string SessionId, out array<PlayerInformation> OutPlayerList);

// Export UGameStatsDatabase::execGetTeamListBySessionID(FFrame&, void* const)
native function GetTeamListBySessionID(const string SessionId, out array<TeamInformation> OutTeamList);

// Export UGameStatsDatabase::execGetEventsListBySessionID(FFrame&, void* const)
native function GetEventsListBySessionID(const string SessionId, out array<GameplayEventMetaData> OutGameplayEvents);

// Export UGameStatsDatabase::execGetWeaponListBySessionID(FFrame&, void* const)
native function GetWeaponListBySessionID(const string SessionId, out array<WeaponClassEventData> OutWeaponList);

// Export UGameStatsDatabase::execGetDamageListBySessionID(FFrame&, void* const)
native function GetDamageListBySessionID(const string SessionId, out array<DamageClassEventData> OutDamageList);

// Export UGameStatsDatabase::execGetProjectileListBySessionID(FFrame&, void* const)
native function GetProjectileListBySessionID(const string SessionId, out array<ProjectileClassEventData> OutProjectileList);

// Export UGameStatsDatabase::execGetPawnListBySessionID(FFrame&, void* const)
native function GetPawnListBySessionID(const string SessionId, out array<PawnClassEventData> OutPawnList);

// Export UGameStatsDatabase::execGetEventCountByType(FFrame&, void* const)
native function int GetEventCountByType(const string SessionId, int EventID);

// Export UGameStatsDatabase::execClearDatabase(FFrame&, void* const)
native function ClearDatabase();

// Export UGameStatsDatabase::execUploadSession(FFrame&, void* const)
native function bool UploadSession(const string SessionId);

defaultproperties
{
    GameStatsFileReaderClassname="UnrealEd.GameStatsFileReader"
    GameStateClassname="GameFramework.GameStateObject"
}