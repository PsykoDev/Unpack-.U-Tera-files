/*******************************************************************************
 * CurvedStairBuilder generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class CurvedStairBuilder extends BrushBuilder
    hidecategories(Object,BrushBuilder);

var() int InnerRadius<ClampMin=1>;
var() int StepHeight;
var() int StepWidth<ClampMin=1>;
var() int AngleOfCurve<ClampMin=1|ClampMax=360>;
var() int NumSteps<ClampMin=1>;
var() int AddToFirstStep;
var() name GroupName;
var() bool CounterClockwise;

function BuildCurvedStair(int Direction)
{
    local Rotator RotStep;
    local Vector vtx, NewVtx;
    local int X, InnerStart, OuterStart, BottomInnerStart, BottomOuterStart, Adjustment;

    RotStep.Yaw = int((float(65536) * (float(AngleOfCurve) / 360.0)) / float(NumSteps));
    // End:0x8B
    if(CounterClockwise)
    {
        RotStep.Yaw *= float(-1);
        Direction *= float(-1);
    }
    InnerStart = GetVertexCount();
    vtx.X = float(InnerRadius);
    X = 0;
    J0xD2:
    // End:0x249 [Loop If]
    if(X < (NumSteps + 1))
    {
        // End:0x111
        if(X == 0)
        {
            Adjustment = AddToFirstStep;
        }
        // End:0x11C
        else
        {
            Adjustment = 0;
        }
        NewVtx = vtx >> (RotStep * float(X));
        Vertex3f(NewVtx.X, NewVtx.Y, vtx.Z - float(Adjustment));
        vtx.Z += float(StepHeight);
        Vertex3f(NewVtx.X, NewVtx.Y, vtx.Z);
        ++ X;
        // [Loop Continue]
        goto J0xD2;
    }
    OuterStart = GetVertexCount();
    vtx.X = float(InnerRadius + StepWidth);
    vtx.Z = 0.0;
    X = 0;
    J0x2BD:
    // End:0x434 [Loop If]
    if(X < (NumSteps + 1))
    {
        // End:0x2FC
        if(X == 0)
        {
            Adjustment = AddToFirstStep;
        }
        // End:0x307
        else
        {
            Adjustment = 0;
        }
        NewVtx = vtx >> (RotStep * float(X));
        Vertex3f(NewVtx.X, NewVtx.Y, vtx.Z - float(Adjustment));
        vtx.Z += float(StepHeight);
        Vertex3f(NewVtx.X, NewVtx.Y, vtx.Z);
        ++ X;
        // [Loop Continue]
        goto J0x2BD;
    }
    BottomInnerStart = GetVertexCount();
    vtx.X = float(InnerRadius);
    vtx.Z = 0.0;
    X = 0;
    J0x49D:
    // End:0x55D [Loop If]
    if(X < (NumSteps + 1))
    {
        NewVtx = vtx >> (RotStep * float(X));
        Vertex3f(NewVtx.X, NewVtx.Y, vtx.Z - float(AddToFirstStep));
        ++ X;
        // [Loop Continue]
        goto J0x49D;
    }
    BottomOuterStart = GetVertexCount();
    vtx.X = float(InnerRadius + StepWidth);
    X = 0;
    J0x5AF:
    // End:0x66F [Loop If]
    if(X < (NumSteps + 1))
    {
        NewVtx = vtx >> (RotStep * float(X));
        Vertex3f(NewVtx.X, NewVtx.Y, vtx.Z - float(AddToFirstStep));
        ++ X;
        // [Loop Continue]
        goto J0x5AF;
    }
    X = 0;
    J0x67A:
    // End:0x91E [Loop If]
    if(X < NumSteps)
    {
        Poly4i(Direction, (InnerStart + (X * 2)) + 2, (InnerStart + (X * 2)) + 1, (OuterStart + (X * 2)) + 1, (OuterStart + (X * 2)) + 2, 'steptop');
        Poly4i(Direction, (InnerStart + (X * 2)) + 1, InnerStart + (X * 2), OuterStart + (X * 2), (OuterStart + (X * 2)) + 1, 'stepfront');
        Poly4i(Direction, BottomInnerStart + X, (InnerStart + (X * 2)) + 1, (InnerStart + (X * 2)) + 2, (BottomInnerStart + X) + 1, 'innercurve');
        Poly4i(Direction, (OuterStart + (X * 2)) + 1, BottomOuterStart + X, (BottomOuterStart + X) + 1, (OuterStart + (X * 2)) + 2, 'outercurve');
        Poly4i(Direction, BottomInnerStart + X, (BottomInnerStart + X) + 1, (BottomOuterStart + X) + 1, BottomOuterStart + X, 'Bottom');
        ++ X;
        // [Loop Continue]
        goto J0x67A;
    }
    Poly4i(Direction, BottomInnerStart + NumSteps, InnerStart + (NumSteps * 2), OuterStart + (NumSteps * 2), BottomOuterStart + NumSteps, 'back');
    //return;    
}

event bool Build()
{
    // End:0x47
    if((AngleOfCurve < 1) || AngleOfCurve > 360)
    {
        return BadParameters("Angle is out of range.");
    }
    // End:0x84
    if(((InnerRadius < 1) || StepWidth < 1) || NumSteps < 1)
    {
        return BadParameters();
    }
    BeginBrush(false, GroupName);
    BuildCurvedStair(1);
    return EndBrush();
    //return ReturnValue;    
}

defaultproperties
{
    InnerRadius=240
    StepHeight=16
    StepWidth=256
    AngleOfCurve=90
    NumSteps=4
    GroupName=CStair
    BitmapFilename="Btn_CurvedStairs"
    ToolTip="BrushBuilderName_CurvedStair"
}