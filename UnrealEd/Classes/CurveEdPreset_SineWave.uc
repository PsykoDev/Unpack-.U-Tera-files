/*******************************************************************************
 * CurveEdPreset_SineWave generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class CurveEdPreset_SineWave extends CurveEdPresetBase
    native
    editinlinenew
    hidecategories(Object);

/** The frequency of the wave */
var() float Frequency;
/** The scale of the wave */
var() float Scale;
/** The offset of the wave */
var() float Offset;

function string GetDisplayName()
{
    local string Retval;

    Retval = "SineWave";
    return Retval;
    //return ReturnValue;    
}

function bool AreSettingsValid(bool bIsSaving)
{
    // End:0x2A
    if((Frequency <= 0.0) || Scale == 0.0)
    {
        return false;
    }
    return true;
    //return ReturnValue;    
}

function bool GetRequiredKeyInTimes(out array<float> RequiredKeyInTimes)
{
    local bool bRetval;
    local int GenerateCount, PointIndex;
    local float StepSize, Freq, SourceValue;

    bRetval = true;
    GenerateCount = 0;
    // End:0x3A
    if(Frequency == float(0))
    {
        Freq = 1.0;
    }
    // End:0x4D
    else
    {
        Freq = Frequency;
    }
    GenerateCount = int((float(4) * Freq) + float(1));
    RequiredKeyInTimes.Insert(0, GenerateCount);
    StepSize = 1.0 / float(GenerateCount - 1);
    SourceValue = 0.0;
    PointIndex = 0;
    J0xBB:
    // End:0x111 [Loop If]
    if(PointIndex < GenerateCount)
    {
        RequiredKeyInTimes[PointIndex] = SourceValue;
        SourceValue += StepSize;
        ++ PointIndex;
        // [Loop Continue]
        goto J0xBB;
    }
    return bRetval;
    //return ReturnValue;    
}

function bool GenerateCurve(out array<float> RequiredKeyInTimes, out array<PresetGeneratedPoint> GeneratedPoints)
{
    local bool bRetval;
    local int GenerateCount, PointIndex;
    local float Freq, SourceValue;

    bRetval = true;
    // End:0x2F
    if(Frequency == float(0))
    {
        Freq = 1.0;
    }
    // End:0x42
    else
    {
        Freq = Frequency;
    }
    GenerateCount = RequiredKeyInTimes.Length;
    GeneratedPoints.Insert(0, GenerateCount);
    PointIndex = 0;
    J0x76:
    // End:0x19B [Loop If]
    if(PointIndex < GenerateCount)
    {
        SourceValue = RequiredKeyInTimes[PointIndex];
        GeneratedPoints[PointIndex].KeyIn = SourceValue;
        GeneratedPoints[PointIndex].KeyOut = (Sin(((360.0 * 0.017453290) * Freq) * SourceValue) * Scale) + Offset;
        GeneratedPoints[PointIndex].TangentsValid = false;
        GeneratedPoints[PointIndex].IntepMode = 1;
        ++ PointIndex;
        // [Loop Continue]
        goto J0x76;
    }
    return bRetval;
    //return ReturnValue;    
}

defaultproperties
{
    Frequency=1.0
    Scale=1.0
}