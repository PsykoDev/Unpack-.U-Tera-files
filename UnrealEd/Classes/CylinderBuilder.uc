/*******************************************************************************
 * CylinderBuilder generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class CylinderBuilder extends BrushBuilder
    hidecategories(Object,BrushBuilder);

var() float Z<ClampMin=0.000001>;
var() float OuterRadius<ClampMin=0.000001>;
var() float InnerRadius;
var() int Sides<ClampMin=3>;
var() name GroupName;
var() bool AlignToSide;
var() bool Hollow;

function BuildCylinder(int Direction, bool InAlignToSide, int InSides, float InZ, float Radius)
{
    local int N, I, J, Ofs;

    N = GetVertexCount();
    // End:0x4B
    if(InAlignToSide)
    {
        Radius /= Cos(3.1415930 / float(InSides));
        Ofs = 1;
    }
    I = 0;
    J0x56:
    // End:0x150 [Loop If]
    if(I < InSides)
    {
        J = -1;
        J0x7C:
        // End:0x142 [Loop If]
        if(J < 2)
        {
            Vertex3f(Radius * Sin((((2.0 * float(I)) + float(Ofs)) * 3.1415930) / float(InSides)), Radius * Cos((((2.0 * float(I)) + float(Ofs)) * 3.1415930) / float(InSides)), (float(J) * InZ) / float(2));
            J += 2;
            // [Loop Continue]
            goto J0x7C;
        }
        ++ I;
        // [Loop Continue]
        goto J0x56;
    }
    I = 0;
    J0x15B:
    // End:0x226 [Loop If]
    if(I < InSides)
    {
        Poly4i(Direction, N + (I * 2), (N + (I * 2)) + 1, N + (((I * 2) + 3) % (2 * InSides)), N + (((I * 2) + 2) % (2 * InSides)), 'Wall');
        ++ I;
        // [Loop Continue]
        goto J0x15B;
    }
    //return;    
}

event bool Build()
{
    local int I, J;

    // End:0x1C
    if(Sides < 3)
    {
        return BadParameters();
    }
    // End:0x4C
    if((Z <= float(0)) || OuterRadius <= float(0))
    {
        return BadParameters();
    }
    // End:0x91
    if(Hollow && (InnerRadius <= float(0)) || InnerRadius >= OuterRadius)
    {
        return BadParameters();
    }
    BeginBrush(false, GroupName);
    BuildCylinder(1, AlignToSide, Sides, Z, OuterRadius);
    // End:0x24B
    if(Hollow)
    {
        BuildCylinder(-1, AlignToSide, Sides, Z, InnerRadius);
        J = -1;
        J0x125:
        // End:0x248 [Loop If]
        if(J < 2)
        {
            I = 0;
            J0x140:
            // End:0x238 [Loop If]
            if(I < Sides)
            {
                Poly4i(J, (I * 2) + ((1 - J) / 2), (((I + 1) % Sides) * 2) + ((1 - J) / 2), ((((I + 1) % Sides) * 2) + ((1 - J) / 2)) + (Sides * 2), ((I * 2) + ((1 - J) / 2)) + (Sides * 2), 'Cap');
                ++ I;
                // [Loop Continue]
                goto J0x140;
            }
            J += 2;
            // [Loop Continue]
            goto J0x125;
        }
    }
    // End:0x2F9
    else
    {
        J = -1;
        J0x25A:
        // End:0x2F9 [Loop If]
        if(J < 2)
        {
            PolyBegin(J, 'Cap');
            I = 0;
            J0x291:
            // End:0x2DF [Loop If]
            if(I < Sides)
            {
                Polyi((I * 2) + ((1 - J) / 2));
                ++ I;
                // [Loop Continue]
                goto J0x291;
            }
            PolyEnd();
            J += 2;
            // [Loop Continue]
            goto J0x25A;
        }
    }
    return EndBrush();
    //return ReturnValue;    
}

defaultproperties
{
    Z=256.0
    OuterRadius=512.0
    InnerRadius=384.0
    Sides=8
    GroupName=Cylinder
    AlignToSide=true
    BitmapFilename="Btn_Cylinder"
    ToolTip="BrushBuilderName_Cylinder"
}