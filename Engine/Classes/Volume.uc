/*******************************************************************************
 * Volume generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class Volume extends Brush
    native
    nativereplication
    notplaceable
    hidecategories(Navigation,Object,Movement,Display);

var Actor AssociatedActor;
/** Should pawns be forced to walk when inside this volume? */
var() bool bForcePawnWalk;
/** Should process all actors within this volume */
var() bool bProcessAllActors;
/** Should this volume only collide with pawns */
var(Collision) bool bPawnsOnly;
/** ??? ?? ???, ??? ???? ?? ??? */
var() bool bSleepMode;

// Export UVolume::execEncompasses(FFrame&, void* const)
native function bool Encompasses(Actor Other);

// Export UVolume::execEncompassesPoint(FFrame&, void* const)
native function bool EncompassesPoint(Vector Loc);

event PostBeginPlay()
{
    super(Actor).PostBeginPlay();
    // End:0x34
    if(AssociatedActor != none)
    {
        GotoState('AssociatedTouch');
        InitialState = GetStateName();
    }
    //return;    
}

simulated function DisplayDebug(HUD HUD, out float out_YL, out float out_YPos)
{
    super(Actor).DisplayDebug(HUD, out_YL, out_YPos);
    HUD.Canvas.DrawText("AssociatedActor " $ string(AssociatedActor), false);
    out_YPos += out_YL;
    HUD.Canvas.SetPos(4.0, out_YPos);
    //return;    
}

simulated function OnToggle(SeqAct_Toggle Action)
{
    // End:0x58
    if(Action.InputLinks[0].bHasImpulse)
    {
        // End:0x55
        if(!bCollideActors)
        {
            SetCollision(true, bBlockActors);
        }
    }
    // End:0x100
    else
    {
        // End:0xAE
        if(Action.InputLinks[1].bHasImpulse)
        {
            // End:0xAB
            if(bCollideActors)
            {
                SetCollision(false, bBlockActors);
            }
        }
        // End:0x100
        else
        {
            // End:0x100
            if(Action.InputLinks[2].bHasImpulse)
            {
                SetCollision(!bCollideActors, bBlockActors);
            }
        }
    }
    CollisionComponent.SetActorCollision(bCollideActors, CollisionComponent.BlockActors);
    ForceNetRelevant();
    SetForcedInitialReplicatedProperty(boolproperty'bCollideActors', bCollideActors == default.bCollideActors);
    //return;    
}

simulated event CollisionChanged()
{
    CollisionComponent.SetBlockRigidBody(bCollideActors && bBlockActors);
    //return;    
}

event ProcessActorSetVolume(Actor Other)
{
    //return;    
}

state AssociatedTouch
{
    event Touch(Actor Other, PrimitiveComponent OtherComp, Vector HitLocation, Vector HitNormal)
    {
        AssociatedActor.Touch(Other, OtherComp, HitLocation, HitNormal);
        //return;        
    }

    event UnTouch(Actor Other)
    {
        AssociatedActor.UnTouch(Other);
        //return;        
    }

    event BeginState(name PreviousStateName)
    {
        local Actor A;

        // End:0x58
        foreach TouchingActors(class'Actor', A)
        {
            Touch(A, none, A.Location, vect(0.0, 0.0, 1.0));            
        }        
        //return;        
    }
    stop;    
}

defaultproperties
{
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
        bAcceptsLights=true
        CollideActors=true
        BlockNonZeroExtent=true
        bDisableAllRigidBody=true
        AlwaysLoadOnClient=true
        AlwaysLoadOnServer=true
        LightingChannels=(bInitialized=true,Dynamic=true)
    object end
    // Reference: BrushComponent'Default__Volume.BrushComponent0'
    BrushComponent=BrushComponent0
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
        bAcceptsLights=true
        CollideActors=true
        BlockNonZeroExtent=true
        bDisableAllRigidBody=true
        AlwaysLoadOnClient=true
        AlwaysLoadOnServer=true
        LightingChannels=(bInitialized=true,Dynamic=true)
    object end
    // Reference: BrushComponent'Default__Volume.BrushComponent0'
    Components(0)=BrushComponent0
    bSkipActorPropertyReplication=true
    bCollideActors=true
    begin object name=BrushComponent0 class=BrushComponent
        ReplacementPrimitive=none
        bAcceptsLights=true
        CollideActors=true
        BlockNonZeroExtent=true
        bDisableAllRigidBody=true
        AlwaysLoadOnClient=true
        AlwaysLoadOnServer=true
        LightingChannels=(bInitialized=true,Dynamic=true)
    object end
    // Reference: BrushComponent'Default__Volume.BrushComponent0'
    CollisionComponent=BrushComponent0
}