/*******************************************************************************
 * RB_ConstraintActor generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class RB_ConstraintActor extends RigidBodyBase
    abstract
    native(Physics)
    placeable
    hidecategories(Navigation);

/** Actors joined effected by this constraint (could be NULL for 'World') */
var() Actor ConstraintActor1;
var() Actor ConstraintActor2;
var() noclear export editinline RB_ConstraintSetup ConstraintSetup;
var() noclear export editinline RB_ConstraintInstance ConstraintInstance;
/** Disable collision between actors joined by this constraint. */
var() const bool bDisableCollision;
var() bool bUpdateActor1RefFrame;
var() bool bUpdateActor2RefFrame;
/** Used if joint is a pulley to define pivot locations using actors in the level. */
var(Pulley) Actor PulleyPivotActor1;
var(Pulley) Actor PulleyPivotActor2;

// Export URB_ConstraintActor::execSetDisableCollision(FFrame&, void* const)
native final function SetDisableCollision(bool NewDisableCollision);

// Export URB_ConstraintActor::execInitConstraint(FFrame&, void* const)
native final function InitConstraint(Actor Actor1, Actor Actor2, optional name Actor1Bone, optional name Actor2Bone, optional float BreakThreshold);

// Export URB_ConstraintActor::execTermConstraint(FFrame&, void* const)
native final function TermConstraint();

simulated function OnDestroy(SeqAct_Destroy Action)
{
    TermConstraint();
    //return;    
}

simulated function OnToggle(SeqAct_Toggle Action)
{
    // End:0xAC
    if(Action.InputLinks[0].bHasImpulse)
    {
        // End:0xA9
        if(Physics != 10)
        {
            SetPhysics(10);
            InitConstraint(ConstraintActor1, ConstraintActor2, ConstraintSetup.ConstraintBone1, ConstraintSetup.ConstraintBone2);
        }
    }
    // End:0x1C5
    else
    {
        // End:0x109
        if(Action.InputLinks[1].bHasImpulse)
        {
            // End:0x106
            if(Physics != 0)
            {
                SetPhysics(0);
                TermConstraint();
            }
        }
        // End:0x1C5
        else
        {
            // End:0x1C5
            if(Action.InputLinks[2].bHasImpulse)
            {
                // End:0x167
                if(Physics != 0)
                {
                    SetPhysics(0);
                    TermConstraint();
                }
                // End:0x1C5
                else
                {
                    SetPhysics(10);
                    InitConstraint(ConstraintActor1, ConstraintActor2, ConstraintSetup.ConstraintBone1, ConstraintSetup.ConstraintBone2);
                }
            }
        }
    }
    //return;    
}

simulated function OnToggleConstraintDrive(SeqAct_ToggleConstraintDrive Action)
{
    // End:0x148
    if(Action.InputLinks[0].bHasImpulse)
    {
        // End:0x7B
        if(Action.bEnableLinearPositionDrive)
        {
            ConstraintInstance.SetLinearPositionDrive(true, true, true);
        }
        // End:0xBF
        if(Action.bEnableLinearvelocityDrive)
        {
            ConstraintInstance.SetLinearVelocityDrive(true, true, true);
        }
        // End:0x102
        if(Action.bEnableAngularPositionDrive)
        {
            ConstraintInstance.SetAngularPositionDrive(true, true);
        }
        // End:0x145
        if(Action.bEnableAngularVelocityDrive)
        {
            ConstraintInstance.SetAngularVelocityDrive(true, true);
        }
    }
    // End:0x205
    else
    {
        // End:0x205
        if(Action.InputLinks[1].bHasImpulse)
        {
            ConstraintInstance.SetLinearPositionDrive(false, false, false);
            ConstraintInstance.SetLinearVelocityDrive(false, false, false);
            ConstraintInstance.SetAngularPositionDrive(false, false);
            ConstraintInstance.SetAngularVelocityDrive(false, false);
        }
    }
    //return;    
}

defaultproperties
{
    ConstraintInstance=RB_ConstraintInstance'Default__RB_ConstraintActor.MyConstraintInstance'
    bUpdateActor1RefFrame=true
    bUpdateActor2RefFrame=true
    begin object name=Sprite class=SpriteComponent
        SpriteCategoryName=Physics
        ReplacementPrimitive=none
        HiddenGame=true
        AlwaysLoadOnClient=false
        AlwaysLoadOnServer=false
    object end
    // Reference: SpriteComponent'Default__RB_ConstraintActor.Sprite'
    Components(0)=Sprite
    begin object name=MyConDrawComponent class=RB_ConstraintDrawComponent
        ReplacementPrimitive=none
    object end
    // Reference: RB_ConstraintDrawComponent'Default__RB_ConstraintActor.MyConDrawComponent'
    Components(1)=MyConDrawComponent
    DrawScale=0.50
    Physics=EPhysics.PHYS_RigidBody
    TickGroup=ETickingGroup.TG_PostAsyncWork
    bHidden=true
    bNoDelete=true
    bEdShouldSnap=true
    SupportedEvents(0)=class'SeqEvent_Touch'
    SupportedEvents(1)=class'SeqEvent_Destroyed'
    SupportedEvents(2)=class'SeqEvent_TakeDamage'
    SupportedEvents(3)=class'SeqEvent_HitWall'
    SupportedEvents(4)=class'SeqEvent_AnimNotify'
    SupportedEvents(5)=class'SeqEvent_MobileTouch'
    SupportedEvents(6)=class'SeqEvent_ConstraintBroken'
}