/*******************************************************************************
 * OnlineSubsystem generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class OnlineSubsystem extends Object
    abstract
    native
    config(Engine);

const PIT_Game = 0x0001;
const PIT_App = 0x0002;
const PIT_Consumable = 0x0004;
const PIT_Durable = 0x0008;
const PIT_GameDemo = 0x0010;
const PIT_All = 0x001F;

enum ELoginStatus
{
    LS_NotLoggedIn,
    LS_UsingLocalProfile,
    LS_LoggedIn,
    LS_MAX
};

enum EFeaturePrivilege
{
    FP_OnlinePlay,
    FP_CommunicationText,
    FP_CommunicationVideo,
    FP_CommunicationVoice,
    FP_ShareUserCreatedContent,
    FP_PurchaseContent,
    FP_ViewPlayerProfile,
    FP_ShowPresenceInformation,
    FP_RecordDVRClips,
    FP_CloudStorage,
    FP_PremiumContent,
    FP_PremiumVideoContent,
    FP_BrowseInternet,
    FP_SocialNetworkSharing,
    FP_KinectSharing,
    FP_FitnessUpload,
    FP_MultiplayerParties,
    FP_MAX
};

enum EFeaturePrivilegeLevel
{
    FPL_Disabled,
    FPL_EnabledFriendsOnly,
    FPL_Enabled,
    FPL_MAX
};

enum EReputationFeedbackType
{
    RFBT_CommunicationsAbusiveVoice,
    RFBT_CommunicationsInappropriateVideo,
    RFBT_FairPlayCheater,
    RFBT_FairPlayKicked,
    RFBT_FairPlayKillsTeammates,
    RFBT_FairPlayQuitter,
    RFBT_FairPlayTampering,
    RFBT_InappropriateUserGeneratedContent,
    RFBT_PositiveHelpfulPlayer,
    RFBT_PositiveHighQualityUserGeneratedContent,
    RFBT_PositiveSkilledPlayer,
    RFBT_MAX
};

enum ENetworkNotificationPosition
{
    NNP_TopLeft,
    NNP_TopCenter,
    NNP_TopRight,
    NNP_CenterLeft,
    NNP_Center,
    NNP_CenterRight,
    NNP_BottomLeft,
    NNP_BottomCenter,
    NNP_BottomRight,
    NNP_MAX
};

enum EOnlineGameState
{
    OGS_NoSession,
    OGS_Pending,
    OGS_Starting,
    OGS_InProgress,
    OGS_Ending,
    OGS_Ended,
    OGS_MAX
};

enum EOnlineEnumerationReadState
{
    OERS_NotStarted,
    OERS_InProgress,
    OERS_Done,
    OERS_Failed,
    OERS_MAX
};

enum EOnlineAccountTier
{
    OAT_Unknown,
    OAT_NewUser,
    OAT_Silver,
    OAT_Gold,
    OAT_FamilyGold,
    OAT_MAX
};

enum EOnlineFriendState
{
    OFS_Offline,
    OFS_Online,
    OFS_Away,
    OFS_Busy,
    OFS_MAX
};

enum EOnlineCreateGameSessionFlag
{
    OCGSF_New,
    OCGSF_ReSubmit,
    OCGSF_MAX
};

enum EOnlineContentType
{
    OCT_Downloaded,
    OCT_SaveGame,
    OCT_MAX
};

enum EOnlineServerConnectionStatus
{
    OSCS_NotConnected,
    OSCS_Connected,
    OSCS_ConnectionDropped,
    OSCS_NoNetworkConnection,
    OSCS_ServiceUnavailable,
    OSCS_UpdateRequired,
    OSCS_ServersTooBusy,
    OSCS_DuplicateLoginDetected,
    OSCS_InvalidUser,
    OSCS_Banned,
    OSCS_TooYoung,
    OSCS_PSNUnavailable,
    OSCS_MAX
};

enum ENATType
{
    NAT_Unknown,
    NAT_Open,
    NAT_Moderate,
    NAT_Strict,
    NAT_MAX
};

enum ELanBeaconState
{
    LANB_NotUsingLanBeacon,
    LANB_Hosting,
    LANB_Searching,
    LANB_MAX
};

enum EOnlineAccountCreateStatus
{
    OACS_CreateSuccessful,
    OACS_UnknownError,
    OACS_InvalidUserName,
    OACS_InvalidPassword,
    OACS_InvalidUniqueUserName,
    OACS_UniqueUserNameInUse,
    OACS_ServiceUnavailable,
    OACS_MAX
};

enum EOnlineFileType
{
    OFT_Unknown,
    OFT_Binary,
    OFT_Json,
    OFT_MAX
};

enum EAchievementRewardType
{
    ART_Unknown,
    ART_Gamerscore,
    ART_InApp,
    ART_Art,
    ART_MAX
};

enum EAchievementMediaAssetType
{
    AMAT_Unknown,
    AMAT_Icon,
    AMAT_Art,
    AMAT_MAX
};

enum EAchievementUnlockType
{
    AUT_Unknown,
    AUT_All,
    AUT_Persistent,
    AUT_Challenge,
    AUT_MAX
};

enum EAchievementParticipationType
{
    EAPT_Unknown,
    EAPT_Individual,
    EAPT_Group,
    EAPT_MAX
};

enum EAchievementProgressState
{
    APS_Unknown,
    APS_Achieved,
    APS_NotStarted,
    APS_InProgress,
    APS_MAX
};

enum ECatalogSortOrder
{
    CSO_FreeAndPaidCountDaily,
    CSO_PaidCountAllTime,
    CSO_PaidCountDail,
    CSO_DigitalReleaseDate,
    CSO_ReleaseDate,
    CSO_UserRatings,
    CSO_MAX
};

enum EMediaItemType
{
    MIT_Unknown,
    MIT_Game,
    MIT_Application,
    MIT_GameContent,
    MIT_GameConsumable,
    MIT_Subscription,
    MIT_MAX
};

enum EInventoryItemState
{
    IIS_Unknown,
    IIS_All,
    IIS_Enabled,
    IIS_Suspended,
    IIS_Expired,
    IIS_Canceled,
    IIS_MAX
};

enum EOnlineNewsType
{
    ONT_Unknown,
    ONT_GameNews,
    ONT_ContentAnnouncements,
    ONT_Misc,
    ONT_MAX
};

enum ESessionMemberStatus
{
    DSMS_Reserved,
    DSMS_Inactive,
    DSMS_Ready,
    DSMS_Active,
    DSMS_MAX
};

struct native UniqueNetId
{
    var QWord Uid;

    structdefaultproperties
    {
        Uid=none
    }
};

struct native PlayerNameIdPair
{
    var init string PlayerName;
    var UniqueNetId UniqueId;

    structdefaultproperties
    {
        PlayerName=""
        UniqueId=(Uid=none)
    }
};

struct native FriendsQuery
{
    var UniqueNetId UniqueId;
    var bool bIsFriend;

    structdefaultproperties
    {
        UniqueId=(Uid=none)
        bIsFriend=false
    }
};

struct native OnlineProfile
{
    var string UserId;
    var OnlineSubsystem.EOnlineAccountTier AccountTier;
    var int Gamerscore;
    var string ApplicationDisplayName;
    var string GameDisplayName;
    var string DisplayPictureURL;
    var string ApplicationDisplayPictureResizeURL;
    var string PublicGamerPictureURL;
    var string GameDisplayPictureResizeURL;

    structdefaultproperties
    {
        UserId=""
        AccountTier=EOnlineAccountTier.OAT_Unknown
        Gamerscore=0
        ApplicationDisplayName=""
        GameDisplayName=""
        DisplayPictureURL=""
        ApplicationDisplayPictureResizeURL=""
        PublicGamerPictureURL=""
        GameDisplayPictureResizeURL=""
    }
};

struct native OnlineFriend
{
    var const UniqueNetId UniqueId;
    var const QWord SessionId;
    var const string NickName;
    var const string PresenceInfo;
    var const OnlineSubsystem.EOnlineFriendState FriendState;
    var const int UserDbId;
    var const int PlanetId;
    var const string GameName;
    var const int ClassId;
    var const int Race;
    var const int Gender;
    var const int Level;
    var const int WorldId;
    var const int GuardId;
    var const int SectionId;
    var const int RegionNameId;
    var const bool bIsOnline;
    var const bool bIsPlaying;
    var const bool bIsPlayingThisGame;
    var const bool bIsJoinable;
    var const bool bHasVoiceSupport;
    var bool bHaveInvited;
    var const bool bHasInvitedYou;

    structdefaultproperties
    {
        UniqueId=(Uid=none)
        SessionId=none
        NickName=""
        PresenceInfo=""
        FriendState=EOnlineFriendState.OFS_Offline
        UserDbId=0
        PlanetId=0
        GameName=""
        ClassId=0
        Race=0
        Gender=0
        Level=0
        WorldId=0
        GuardId=0
        SectionId=0
        RegionNameId=0
        bIsOnline=false
        bIsPlaying=false
        bIsPlayingThisGame=false
        bIsJoinable=false
        bHasVoiceSupport=false
        bHaveInvited=false
        bHasInvitedYou=false
    }
};

struct native OnlineContent
{
    var OnlineSubsystem.EOnlineContentType ContentType;
    var byte UserIndex;
    var bool bIsCorrupt;
    var int DeviceID;
    var int LicenseMask;
    var string FriendlyName;
    var string Filename;
    var string ContentPath;
    var array<string> ContentPackages;
    var array<string> ContentFiles;

    structdefaultproperties
    {
        ContentType=EOnlineContentType.OCT_Downloaded
        UserIndex=0
        bIsCorrupt=false
        DeviceID=0
        LicenseMask=0
        FriendlyName=""
        Filename=""
        ContentPath=""
        ContentPackages=none
        ContentFiles=none
    }
};

struct native OnlineCrossTitleContent extends OnlineContent
{
    var int TitleId;
};

struct native OnlineRegistrant
{
    var const UniqueNetId PlayerNetId;

    structdefaultproperties
    {
        PlayerNetId=(Uid=none)
    }
};

struct native OnlineArbitrationRegistrant extends OnlineRegistrant
{
    var const QWord MachineId;
    var const int Trustworthiness;
};

struct SpeechRecognizedWord
{
    var int WordId;
    var string WordText;
    var float Confidence;

    structdefaultproperties
    {
        WordId=0
        WordText=""
        Confidence=0.0
    }
};

struct native OnlinePlayerScore
{
    var UniqueNetId PlayerID;
    var int TeamID;
    var int Score;

    structdefaultproperties
    {
        PlayerID=(Uid=none)
        TeamID=0
        Score=0
    }
};

struct native LocalTalker
{
    var bool bHasVoice;
    var bool bHasNetworkedVoice;
    var bool bIsRecognizingSpeech;
    var bool bWasTalking;
    var bool bIsTalking;
    var bool bIsRegistered;
    var float TimeSinceLastPacket;

    structdefaultproperties
    {
        bHasVoice=false
        bHasNetworkedVoice=false
        bIsRecognizingSpeech=false
        bWasTalking=false
        bIsTalking=false
        bIsRegistered=false
        TimeSinceLastPacket=0.0
    }
};

struct native RemoteTalker
{
    var UniqueNetId TalkerId;
    var float LastNotificationTime;
    var bool bWasTalking;
    var bool bIsTalking;
    var bool bIsRegistered;
    var float TimeSinceLastPacket;
    var float TimeSinceJoining;

    structdefaultproperties
    {
        TalkerId=(Uid=none)
        LastNotificationTime=0.0
        bWasTalking=false
        bIsTalking=false
        bIsRegistered=false
        TimeSinceLastPacket=0.0
        TimeSinceJoining=0.0
    }
};

struct native OnlineFriendMessage
{
    var UniqueNetId SendingPlayerId;
    var string SendingPlayerNick;
    var bool bIsFriendInvite;
    var bool bIsGameInvite;
    var bool bWasAccepted;
    var bool bWasDenied;
    var string Message;

    structdefaultproperties
    {
        SendingPlayerId=(Uid=none)
        SendingPlayerNick=""
        bIsFriendInvite=false
        bIsGameInvite=false
        bWasAccepted=false
        bWasDenied=false
        Message=""
    }
};

struct native NamedInterface
{
    var name InterfaceName;
    var Object InterfaceObject;

    structdefaultproperties
    {
        InterfaceName=None
        InterfaceObject=none
    }
};

struct native NamedInterfaceDef
{
    var name InterfaceName;
    var string InterfaceClassName;

    structdefaultproperties
    {
        InterfaceName=None
        InterfaceClassName=""
    }
};

struct native EmsFile
{
    var init string Hash;
    var init string DLName;
    var init string Filename;
    var int FileSize;
    var init string UploadedDateTime;

    structdefaultproperties
    {
        Hash=""
        DLName=""
        Filename=""
        FileSize=0
        UploadedDateTime=""
    }
};

struct native TitleFile
{
    var string Filename;
    var OnlineSubsystem.EOnlineEnumerationReadState AsyncState;
    var array<byte> Data;

    structdefaultproperties
    {
        Filename=""
        AsyncState=EOnlineEnumerationReadState.OERS_NotStarted
        Data=none
    }
};

struct native CommunityContentFile
{
    var int ContentId;
    var string RemoteContentPath;
    var OnlineSubsystem.EOnlineFileType ContentType;
    var int FileSize;
    var UniqueNetId Owner;
    var int DownloadCount;
    var float AverageRating;
    var int RatingCount;
    var int LastRatingGiven;
    var string LocalFilePath;

    structdefaultproperties
    {
        ContentId=0
        RemoteContentPath=""
        ContentType=EOnlineFileType.OFT_Unknown
        FileSize=0
        Owner=(Uid=none)
        DownloadCount=0
        AverageRating=0.0
        RatingCount=0
        LastRatingGiven=0
        LocalFilePath=""
    }
};

struct native CommunityContentMetadata
{
    var OnlineSubsystem.EOnlineFileType ContentType;
    var string RemotePath;
    var string DisplayName;

    structdefaultproperties
    {
        ContentType=EOnlineFileType.OFT_Unknown
        RemotePath=""
        DisplayName=""
    }
};

struct native NamedSession
{
    var name SessionName;
    var native const transient Pointer SessionInfo;
    var OnlineGameSettings GameSettings;
    var array<OnlineRegistrant> Registrants;
    var array<OnlineArbitrationRegistrant> ArbitrationRegistrants;

    structdefaultproperties
    {
        SessionName=None
        GameSettings=none
        Registrants=none
        ArbitrationRegistrants=none
    }
};

struct native AchievementReward
{
    var const string RewardName;
    var const string Description;
    var const string Data;
    var const OnlineSubsystem.EAchievementRewardType RewardType;

    structdefaultproperties
    {
        RewardName=""
        Description=""
        Data=""
        RewardType=EAchievementRewardType.ART_Unknown
    }
};

struct native AchievementMediaAsset
{
    var const string AssetName;
    var const OnlineSubsystem.EAchievementMediaAssetType AssetType;
    var const string AssetURL;

    structdefaultproperties
    {
        AssetName=""
        AssetType=EAchievementMediaAssetType.AMAT_Unknown
        AssetURL=""
    }
};

struct native AchievementTitleAssociation
{
    var const string LocalizedTitleName;
    var const int TitleId;

    structdefaultproperties
    {
        LocalizedTitleName=""
        TitleId=0
    }
};

struct native AchievementDetails
{
    var const int Id;
    var const string StringId;
    var const string AchievementName;
    var const string Description;
    var const string HowTo;
    var Surface Image;
    var const byte MonthEarned;
    var const byte DayEarned;
    var const byte YearEarned;
    var const byte DayOfWeekEarned;
    var const int GamerPoints;
    var const bool bIsSecret;
    var const bool bWasAchievedOnline;
    var const bool bWasAchievedOffline;
    var const OnlineSubsystem.EAchievementUnlockType UnlockType;
    var const QWord ChallengeWindowBegin;
    var const QWord ChallengeWindowEnd;
    var const string DeepLink;
    var const QWord EstimatedUnlockTime;
    var const bool bIsRevoked;
    var const OnlineSubsystem.EAchievementParticipationType ParticipationType;
    var const array<string> PlatformsAvailableOn;
    var const OnlineSubsystem.EAchievementProgressState ProgressState;
    var const array<AchievementReward> Rewards;
    var const array<AchievementMediaAsset> MediaAssets;
    var const string ProductID;
    var const string ServiceConfigurationID;
    var const array<AchievementTitleAssociation> TitleAssociations;

    structdefaultproperties
    {
        Id=0
        StringId=""
        AchievementName=""
        Description=""
        HowTo=""
        Image=none
        MonthEarned=0
        DayEarned=0
        YearEarned=0
        DayOfWeekEarned=0
        GamerPoints=0
        bIsSecret=false
        bWasAchievedOnline=false
        bWasAchievedOffline=false
        UnlockType=EAchievementUnlockType.AUT_Unknown
        ChallengeWindowBegin=none
        ChallengeWindowEnd=none
        DeepLink=""
        EstimatedUnlockTime=none
        bIsRevoked=false
        ParticipationType=EAchievementParticipationType.EAPT_Unknown
        PlatformsAvailableOn=none
        ProgressState=EAchievementProgressState.APS_Unknown
        Rewards=none
        MediaAssets=none
        ProductID=""
        ServiceConfigurationID=""
        TitleAssociations=none
    }
};

struct native MarketplaceProductAvailability
{
    var const array<string> AcceptablePaymentInstrumentTypes;
    var const string Description;
    var const string Title;
    var const int ConsumableQuantity;
    var const string ContentId;
    var const string CurrencyCode;
    var const string DisplayListPrice;
    var const string DisplayPrice;
    var const string DistributionType;
    var const bool bIsPurchasable;
    var const float ListPrice;
    var const string OfferId;
    var const float Price;
    var const string PromotionalText;
    var const string SignedOffer;

    structdefaultproperties
    {
        AcceptablePaymentInstrumentTypes=none
        Description=""
        Title=""
        ConsumableQuantity=0
        ContentId=""
        CurrencyCode=""
        DisplayListPrice=""
        DisplayPrice=""
        DistributionType=""
        bIsPurchasable=false
        ListPrice=0.0
        OfferId=""
        Price=0.0
        PromotionalText=""
        SignedOffer=""
    }
};

struct native MarketplaceProductImage
{
    var const string Id;
    var const int Height;
    var const int Width;
    var const string Purpose;
    var const array<string> Purposes;
    var const string ResizeURL;

    structdefaultproperties
    {
        Id=""
        Height=0
        Width=0
        Purpose=""
        Purposes=none
        ResizeURL=""
    }
};

struct native MarketplaceProductDetails
{
    var const string StandardId;
    var const OnlineSubsystem.EMediaItemType MediaItemType;
    var const string ProductName;
    var const string ProductID;
    var const QWord ReleaseDate;
    var const string SandboxId;
    var const int TitleId;
    var const bool bIsBundle;
    var const bool bIsPartOfAnyBundle;
    var const string ReducedName;
    var const array<MarketplaceProductImage> Images;
    var OnlineSubsystem.EOnlineEnumerationReadState DetailsReadState;
    var const array<MarketplaceProductAvailability> Availabilities;
    var const string ProductDescription;

    structdefaultproperties
    {
        StandardId=""
        MediaItemType=EMediaItemType.MIT_Unknown
        ProductName=""
        ProductID=""
        ReleaseDate=none
        SandboxId=""
        TitleId=0
        bIsBundle=false
        bIsPartOfAnyBundle=false
        ReducedName=""
        Images=none
        DetailsReadState=EOnlineEnumerationReadState.OERS_NotStarted
        Availabilities=none
        ProductDescription=""
    }
};

struct native MarketplaceInventoryItem
{
    var const string ProductID;
    var const OnlineSubsystem.EMediaItemType MediaItemType;
    var const OnlineSubsystem.EInventoryItemState ItemState;
    var const int ConsumableBalance;
    var const int TitleId;
    var const array<string> ContainerIds;
    var const QWord StartDate;
    var const QWord EndDate;
    var const QWord RightsObtainedDate;
    var const string URL;
    var const string ConsumableUrl;

    structdefaultproperties
    {
        ProductID=""
        MediaItemType=EMediaItemType.MIT_Unknown
        ItemState=EInventoryItemState.IIS_Unknown
        ConsumableBalance=0
        TitleId=0
        ContainerIds=none
        StartDate=none
        EndDate=none
        RightsObtainedDate=none
        URL=""
        ConsumableUrl=""
    }
};

struct native SessionMemberInfo
{
    var UniqueNetId PlayerNetId;
    var OnlineSubsystem.ESessionMemberStatus MemberStatus;
    var init string SecureAddress;
    var init string NickName;
    var bool Muted;

    structdefaultproperties
    {
        PlayerNetId=(Uid=none)
        MemberStatus=ESessionMemberStatus.DSMS_Reserved
        SecureAddress=""
        NickName=""
        Muted=false
    }
};

struct native OnlinePartyMember
{
    var const UniqueNetId UniqueId;
    var const string NickName;
    var const byte LocalUserNum;
    var const OnlineSubsystem.ENATType NatType;
    var const int TitleId;
    var const bool bIsLocal;
    var const bool bIsInPartyVoice;
    var const bool bIsTalking;
    var const bool bIsInGameSession;
    var const bool bIsPlayingThisGame;
    var const QWord SessionId;
    var const int Data1;
    var const int Data2;
    var const int Data3;
    var const int Data4;

    structdefaultproperties
    {
        UniqueId=(Uid=none)
        NickName=""
        LocalUserNum=0
        NatType=ENATType.NAT_Unknown
        TitleId=0
        bIsLocal=false
        bIsInPartyVoice=false
        bIsTalking=false
        bIsInGameSession=false
        bIsPlayingThisGame=false
        SessionId=none
        Data1=0
        Data2=0
        Data3=0
        Data4=0
    }
};

struct native SocialPostPrivileges
{
    var const bool bCanPostImage;
    var const bool bCanPostLink;

    structdefaultproperties
    {
        bCanPostImage=false
        bCanPostLink=false
    }
};

struct native SocialPostImageFlags
{
    var bool bIsUserGeneratedImage;
    var bool bIsGameGeneratedImage;
    var bool bIsAchievementImage;
    var bool bIsMediaImage;

    structdefaultproperties
    {
        bIsUserGeneratedImage=false
        bIsGameGeneratedImage=false
        bIsAchievementImage=false
        bIsMediaImage=false
    }
};

struct native SocialPostImageInfo
{
    var SocialPostImageFlags Flags;
    var string MessageText;
    var string TitleText;
    var string PictureCaption;
    var string PictureDescription;

    structdefaultproperties
    {
        Flags=(bIsUserGeneratedImage=false,bIsGameGeneratedImage=false,bIsAchievementImage=false,bIsMediaImage=false)
        MessageText=""
        TitleText=""
        PictureCaption=""
        PictureDescription=""
    }
};

struct native SocialPostLinkInfo extends SocialPostImageInfo
{
    var string TitleURL;
    var string PictureURL;
};

struct native SessionUpdateInfo
{
    var const array<SessionMemberInfo> MembersJoined;
    var const array<SessionMemberInfo> MembersLeft;
    var const bool bHostDeviceTokenChanged;
    var const bool bInitializationStateChanged;
    var const bool bMatchmakingStatusChanged;
    var const bool bMemberJoinedOrLeft;
    var const bool bMemberStatusChanged;
    var const bool bSessionJoinabilityChanged;
    var const bool bCustomPropertyChange;
    var const bool bMemberCustomPropertyChange;

    structdefaultproperties
    {
        MembersJoined=none
        MembersLeft=none
        bHostDeviceTokenChanged=false
        bInitializationStateChanged=false
        bMatchmakingStatusChanged=false
        bMemberJoinedOrLeft=false
        bMemberStatusChanged=false
        bSessionJoinabilityChanged=false
        bCustomPropertyChange=false
        bMemberCustomPropertyChange=false
    }
};

var private native const noexport Pointer VfTable_FTickableObject;
var OnlineAccountInterface AccountInterface;
var OnlinePlayerInterface PlayerInterface;
var OnlinePlayerInterfaceEx PlayerInterfaceEx;
var OnlineMarketplaceInterface MarketplaceInterface;
var OnlineSystemInterface SystemInterface;
var OnlineGameInterface GameInterface;
var OnlineContentInterface ContentInterface;
var OnlineVoiceInterface VoiceInterface;
var OnlineStatsInterface StatsInterface;
var OnlineNewsInterface NewsInterface;
var OnlinePartyChatInterface PartyChatInterface;
var OnlineTitleFileInterface TitleFileInterface;
var OnlineTitleFileCacheInterface TitleFileCacheInterface;
var UserCloudFileInterface UserCloudInterface;
var SharedCloudFileInterface SharedCloudInterface;
var OnlineSocialInterface SocialInterface;
var OnlineAuthInterface AuthInterface;
var OnlinePartyInterface PartyInterface;
var OnlineGameLiveStreamingInterface GameLiveStreamingInterface;
var OnlineGameDVRInterface GameDVRInterface;
var OnlineCommunityContentInterface CommunityContentInterface;
var native UniqueNetId LoggedInPlayerNetId;
var private array<NamedInterface> NamedInterfaces;
var config array<config NamedInterfaceDef> NamedInterfaceDefs;
var protected const array<NamedSession> Sessions;
var array<SessionMemberInfo> PartyMemberList;
var array<SessionMemberInfo> GameMemberList;
var config bool bUseBuildIdOverride;
var config int BuildIdOverride;
var config string IniLocPatcherClassName;
var transient IniLocPatcher Patcher;
var config float AsyncMinCompletionTime;
var const config string DefaultSessionTemplateName;
var const config string PartySessionTemplateName;

// Export UOnlineSubsystem::execInit(FFrame&, void* const)
native event bool Init();

event bool PostInit()
{
    local class<IniLocPatcher> IniLocPatcherClass;

    // End:0xC4
    if(IniLocPatcherClassName != "")
    {
        LogInternal(("Loading " $ IniLocPatcherClassName) $ " for INI/Loc patching", 'DevMCP');
        IniLocPatcherClass = class<IniLocPatcher>(DynamicLoadObject(IniLocPatcherClassName, class'Class'));
        Patcher = new IniLocPatcherClass;
        // End:0xC2
        if(Patcher != none)
        {
            Patcher.Init();
        }
        // End:0xC4
        else
        {
            return false;
        }
    }
    return true;
    //return ReturnValue;    
}

// Export UOnlineSubsystem::execExit(FFrame&, void* const)
native event Exit();

event bool SetAccountInterface(Object NewInterface)
{
    AccountInterface = OnlineAccountInterface(NewInterface);
    return NotEqual_InterfaceInterface(AccountInterface, (none));
    //return ReturnValue;    
}

event bool SetPlayerInterface(Object NewInterface)
{
    PlayerInterface = OnlinePlayerInterface(NewInterface);
    return NotEqual_InterfaceInterface(PlayerInterface, (none));
    //return ReturnValue;    
}

event bool SetPlayerInterfaceEx(Object NewInterface)
{
    PlayerInterfaceEx = OnlinePlayerInterfaceEx(NewInterface);
    return NotEqual_InterfaceInterface(PlayerInterfaceEx, (none));
    //return ReturnValue;    
}

event bool SetPartyInterface(Object NewInterface)
{
    PartyInterface = OnlinePartyInterface(NewInterface);
    return NotEqual_InterfaceInterface(PartyInterface, (none));
    //return ReturnValue;    
}

event bool SetMarketplaceInterface(Object NewInterface)
{
    MarketplaceInterface = OnlineMarketplaceInterface(NewInterface);
    return NotEqual_InterfaceInterface(MarketplaceInterface, (none));
    //return ReturnValue;    
}

event bool SetSystemInterface(Object NewInterface)
{
    SystemInterface = OnlineSystemInterface(NewInterface);
    return NotEqual_InterfaceInterface(SystemInterface, (none));
    //return ReturnValue;    
}

event bool SetGameInterface(Object NewInterface)
{
    GameInterface = OnlineGameInterface(NewInterface);
    return NotEqual_InterfaceInterface(GameInterface, (none));
    //return ReturnValue;    
}

event bool SetContentInterface(Object NewInterface)
{
    ContentInterface = OnlineContentInterface(NewInterface);
    return NotEqual_InterfaceInterface(ContentInterface, (none));
    //return ReturnValue;    
}

event bool SetVoiceInterface(Object NewInterface)
{
    VoiceInterface = OnlineVoiceInterface(NewInterface);
    return NotEqual_InterfaceInterface(VoiceInterface, (none));
    //return ReturnValue;    
}

event bool SetStatsInterface(Object NewInterface)
{
    StatsInterface = OnlineStatsInterface(NewInterface);
    return NotEqual_InterfaceInterface(StatsInterface, (none));
    //return ReturnValue;    
}

event bool SetNewsInterface(Object NewInterface)
{
    NewsInterface = OnlineNewsInterface(NewInterface);
    return NotEqual_InterfaceInterface(NewsInterface, (none));
    //return ReturnValue;    
}

event bool SetPartyChatInterface(Object NewInterface)
{
    PartyChatInterface = OnlinePartyChatInterface(NewInterface);
    return NotEqual_InterfaceInterface(PartyChatInterface, (none));
    //return ReturnValue;    
}

event bool SetTitleFileInterface(Object NewInterface)
{
    TitleFileInterface = OnlineTitleFileInterface(NewInterface);
    return NotEqual_InterfaceInterface(TitleFileInterface, (none));
    //return ReturnValue;    
}

event bool SetTitleFileCacheInterface(Object NewInterface)
{
    TitleFileCacheInterface = OnlineTitleFileCacheInterface(NewInterface);
    return NotEqual_InterfaceInterface(TitleFileCacheInterface, (none));
    //return ReturnValue;    
}

event bool SetSocialInterface(Object InSocialInterface)
{
    SocialInterface = OnlineSocialInterface(InSocialInterface);
    return NotEqual_InterfaceInterface(SocialInterface, (none));
    //return ReturnValue;    
}

event bool SetAuthInterface(Object InAuthInterface)
{
    AuthInterface = OnlineAuthInterface(InAuthInterface);
    return NotEqual_InterfaceInterface(AuthInterface, (none));
    //return ReturnValue;    
}

event bool SetUserCloudInterface(Object InCloudInterface)
{
    UserCloudInterface = UserCloudFileInterface(InCloudInterface);
    return NotEqual_InterfaceInterface(UserCloudInterface, (none));
    //return ReturnValue;    
}

event bool SetSharedCloudInterface(Object InCloudInterface)
{
    SharedCloudInterface = SharedCloudFileInterface(InCloudInterface);
    return NotEqual_InterfaceInterface(SharedCloudInterface, (none));
    //return ReturnValue;    
}

event bool SetGameDVRInterface(Object InGameDVRInterface)
{
    GameDVRInterface = OnlineGameDVRInterface(InGameDVRInterface);
    return NotEqual_InterfaceInterface(GameDVRInterface, (none));
    //return ReturnValue;    
}

event bool SetCommunityContentInterface(Object InCommunityContentInterface)
{
    CommunityContentInterface = OnlineCommunityContentInterface(InCommunityContentInterface);
    return NotEqual_InterfaceInterface(CommunityContentInterface, (none));
    //return ReturnValue;    
}

event SetNamedInterface(name InterfaceName, Object NewInterface)
{
    local int InterfaceIndex;

    InterfaceIndex = NamedInterfaces.Find('InterfaceName', InterfaceName);
    // End:0x98
    if(InterfaceIndex == -1)
    {
        InterfaceIndex = NamedInterfaces.Length;
        NamedInterfaces.Length = NamedInterfaces.Length + 1;
        NamedInterfaces[InterfaceIndex].InterfaceName = InterfaceName;
    }
    NamedInterfaces[InterfaceIndex].InterfaceObject = NewInterface;
    //return;    
}

event Object GetNamedInterface(name InterfaceName)
{
    local int InterfaceIndex;

    InterfaceIndex = NamedInterfaces.Find('InterfaceName', InterfaceName);
    // End:0x63
    if(InterfaceIndex != -1)
    {
        return NamedInterfaces[InterfaceIndex].InterfaceObject;
    }
    return none;
    //return ReturnValue;    
}

// Export UOnlineSubsystem::execRaiseEvent(FFrame&, void* const)
native event bool RaiseEvent(const string EventName, const array<string> EventParams);

// Export UOnlineSubsystem::execUniqueNetIdToString(FFrame&, void* const)
native static final function string UniqueNetIdToString(const out UniqueNetId IdToConvert, optional bool Hex)
{
    Hex = true;                
}

// Export UOnlineSubsystem::execStringToUniqueNetId(FFrame&, void* const)
native static final function bool StringToUniqueNetId(string UniqueNetIdString, out UniqueNetId out_UniqueId);

event UniqueNetId GetPlayerUniqueNetIdFromIndex(int UserIndex)
{
    local UniqueNetId ReturnVal, NullId;

    // End:0x6E
    if(EqualEqual_InterfaceInterface(PlayerInterface, (none)) || !PlayerInterface.GetUniquePlayerId(byte(UserIndex), ReturnVal))
    {
        ReturnVal = NullId;
    }
    return ReturnVal;
    //return ReturnValue;    
}

// Export UOnlineSubsystem::execGetBuildUniqueId(FFrame&, void* const)
native function int GetBuildUniqueId();

// Export UOnlineSubsystem::execGetNumSupportedLogins(FFrame&, void* const)
native static final function int GetNumSupportedLogins();

function bool IsInSession(name SessionName)
{
    local int I;

    I = 0;
    J0x0B:
    // End:0x67 [Loop If]
    if(I < Sessions.Length)
    {
        // End:0x59
        if(Sessions[I].SessionName == SessionName)
        {
            return true;
        }
        ++ I;
        // [Loop Continue]
        goto J0x0B;
    }
    return false;
    //return ReturnValue;    
}

static function DumpGameSettings(const OnlineGameSettings GameSettings)
{
    LogInternal("    OnlineGameSettings: " $ string(GameSettings));
    LogInternal("      OwningPlayerName: " $ GameSettings.OwningPlayerName);
    LogInternal("      OwningPlayerId: " $ UniqueNetIdToString(GameSettings.OwningPlayerId));
    LogInternal("      PingInMs: " $ string(GameSettings.PingInMs));
    LogInternal("      NumPublicConnections: " $ string(GameSettings.NumPublicConnections));
    LogInternal("      NumOpenPublicConnections: " $ string(GameSettings.NumOpenPublicConnections));
    LogInternal("      NumPrivateConnections: " $ string(GameSettings.NumPrivateConnections));
    LogInternal("      NumOpenPrivateConnections: " $ string(GameSettings.NumOpenPrivateConnections));
    LogInternal("      bIsLanMatch: " $ string(GameSettings.bIsLanMatch));
    LogInternal("      bIsDedicated: " $ string(GameSettings.bIsDedicated));
    LogInternal("      bUsesStats: " $ string(GameSettings.bUsesStats));
    LogInternal("      bUsesArbitration: " $ string(GameSettings.bUsesArbitration));
    LogInternal("      bAntiCheatProtected: " $ string(GameSettings.bAntiCheatProtected));
    LogInternal("      bShouldAdvertise: " $ string(GameSettings.bShouldAdvertise));
    LogInternal("      bAllowJoinInProgress: " $ string(GameSettings.bAllowJoinInProgress));
    LogInternal("      bAllowInvites: " $ string(GameSettings.bAllowInvites));
    LogInternal("      bUsesPresence: " $ string(GameSettings.bUsesPresence));
    LogInternal("      bWasFromInvite: " $ string(GameSettings.bWasFromInvite));
    LogInternal("      bAllowJoinViaPresence: " $ string(GameSettings.bAllowJoinViaPresence));
    LogInternal("      bAllowJoinViaPresenceFriendsOnly: " $ string(GameSettings.bAllowJoinViaPresenceFriendsOnly));
    LogInternal("      GameState: " $ string(GameSettings.GameState));
    //return;    
}

function DumpSessionState()
{
    local int Index, PlayerIndex;
    local UniqueNetId NetId, ZeroId;

    NetId = ZeroId;
    ZeroId = NetId;
    LogInternal("Unreal online session state");
    LogInternal("-------------------------------------------------------------");
    LogInternal("");
    LogInternal("Number of sessions: " $ string(Sessions.Length));
    Index = 0;
    J0xBF:
    // End:0x375 [Loop If]
    if(Index < Sessions.Length)
    {
        LogInternal("  Session: " $ string(Sessions[Index].SessionName));
        DumpGameSettings(Sessions[Index].GameSettings);
        LogInternal("");
        LogInternal("    Number of players: " $ string(Sessions[Index].Registrants.Length));
        PlayerIndex = 0;
        J0x198:
        // End:0x251 [Loop If]
        if(PlayerIndex < Sessions[Index].Registrants.Length)
        {
            NetId = Sessions[Index].Registrants[PlayerIndex].PlayerNetId;
            LogInternal("      Player: " $ UniqueNetIdToString(NetId));
            ++ PlayerIndex;
            // [Loop Continue]
            goto J0x198;
        }
        LogInternal("    Number of arbitrated players: " $ string(Sessions[Index].ArbitrationRegistrants.Length));
        PlayerIndex = 0;
        J0x2AE:
        // End:0x367 [Loop If]
        if(PlayerIndex < Sessions[Index].ArbitrationRegistrants.Length)
        {
            NetId = Sessions[Index].ArbitrationRegistrants[PlayerIndex].PlayerNetId;
            LogInternal("      Player: " $ UniqueNetIdToString(NetId));
            ++ PlayerIndex;
            // [Loop Continue]
            goto J0x2AE;
        }
        ++ Index;
        // [Loop Continue]
        goto J0xBF;
    }
    //return;    
}

static function DumpNetIds(const out array<UniqueNetId> Players, string DebugLabel)
{
    local int PlayerIdx;
    local UniqueNetId NetId;

    PlayerIdx = 0;
    J0x0B:
    // End:0xA0 [Loop If]
    if(PlayerIdx < Players.Length)
    {
        NetId = Players[PlayerIdx];
        LogInternal(((((DebugLabel $ ": ") $ " PlayerIdx=") $ string(PlayerIdx)) $ " UniqueId=") $ UniqueNetIdToString(NetId));
        ++ PlayerIdx;
        // [Loop Continue]
        goto J0x0B;
    }
    //return;    
}

function DumpVoiceRegistration()
{
    //return;    
}

function SetDebugSpewLevel(int DebugSpewLevel)
{
    //return;    
}

defaultproperties
{
    NamedInterfaceDefs(0)=(InterfaceName=RecentPlayersList,InterfaceClassName="Engine.OnlineRecentPlayersList")
}