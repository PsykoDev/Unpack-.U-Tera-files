/*******************************************************************************
 * AmbientSoundSimpleToggleable generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AmbientSoundSimpleToggleable extends AmbientSoundSimple
    native(Sound)
    placeable
    hidecategories(Navigation,Audio)
    autoexpandcategories(Audio,AmbientSoundSimple,AmbientSoundSimpleToggleable);

struct CheckpointRecord
{
    var bool bCurrentlyPlaying;

    structdefaultproperties
    {
        bCurrentlyPlaying=false
    }
};

var repnotify bool bCurrentlyPlaying;
var() bool bFadeOnToggle;
var transient bool bIgnoreAutoPlay;
var() float FadeInDuration;
var() float FadeInVolumeLevel;
var() float FadeOutDuration;
var() float FadeOutVolumeLevel;

replication
{
    // Pos:0x000
    if(Role == ROLE_Authority)
        bCurrentlyPlaying
}

simulated event PostBeginPlay()
{
    super(Actor).PostBeginPlay();
    bCurrentlyPlaying = AudioComponent.bAutoPlay;
    //return;    
}

simulated event ReplicatedEvent(name VarName)
{
    // End:0x3E
    if(VarName == 'bCurrentlyPlaying')
    {
        // End:0x31
        if(bCurrentlyPlaying)
        {
            StartPlaying();
        }
        // End:0x3B
        else
        {
            StopPlaying();
        }
    }
    // End:0x51
    else
    {
        super(Actor).ReplicatedEvent(VarName);
    }
    //return;    
}

simulated function StartPlaying()
{
    // End:0x41
    if(bFadeOnToggle)
    {
        AudioComponent.FadeIn(FadeInDuration, FadeInVolumeLevel);
    }
    // End:0x61
    else
    {
        AudioComponent.Play();
    }
    bCurrentlyPlaying = true;
    //return;    
}

simulated function StopPlaying()
{
    // End:0x41
    if(bFadeOnToggle)
    {
        AudioComponent.FadeOut(FadeOutDuration, FadeOutVolumeLevel);
    }
    // End:0x60
    else
    {
        AudioComponent.Stop();
    }
    bCurrentlyPlaying = false;
    //return;    
}

simulated function OnToggle(SeqAct_Toggle Action)
{
    // End:0xA4
    if(Action.InputLinks[0].bHasImpulse || Action.InputLinks[2].bHasImpulse && !AudioComponent.bWasPlaying)
    {
        StartPlaying();
    }
    // End:0xBA
    else
    {
        bIgnoreAutoPlay = true;
        StopPlaying();
    }
    ForceNetRelevant();
    //return;    
}

function CreateCheckpointRecord(out CheckpointRecord Record)
{
    Record.bCurrentlyPlaying = bCurrentlyPlaying;
    //return;    
}

function ApplyCheckpointRecord(const out CheckpointRecord Record)
{
    bCurrentlyPlaying = Record.bCurrentlyPlaying;
    // End:0x42
    if(bCurrentlyPlaying)
    {
        StartPlaying();
    }
    // End:0x4C
    else
    {
        StopPlaying();
    }
    //return;    
}

defaultproperties
{
    FadeInDuration=1.0
    FadeInVolumeLevel=1.0
    FadeOutDuration=1.0
    SoundCueInstance=SoundCue'Default__AmbientSoundSimpleToggleable.SoundCue0'
    SoundNodeInstance=SoundNodeAmbient'Default__AmbientSoundSimpleToggleable.SoundNodeAmbient0'
    bAutoPlay=false
    begin object name=AudioComponent0 class=AudioComponent
        PreviewSoundRadius=DrawSoundRadiusComponent'Default__AmbientSoundSimpleToggleable.DrawSoundRadius0'
    object end
    // Reference: AudioComponent'Default__AmbientSoundSimpleToggleable.AudioComponent0'
    AudioComponent=AudioComponent0
    begin object name=Sprite class=SpriteComponent
        Sprite=Texture2D'EditorResources.AmbientSoundIcons.S_Ambient_Sound_Toggleable'
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__AmbientSoundSimpleToggleable.Sprite'
    SpriteComp=Sprite
    begin object name=Sprite class=SpriteComponent
        Sprite=Texture2D'EditorResources.AmbientSoundIcons.S_Ambient_Sound_Toggleable'
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__AmbientSoundSimpleToggleable.Sprite'
    Components(0)=Sprite
    begin object name=DrawSoundRadius0 class=DrawSoundRadiusComponent
        SphereColor=(R=255,G=255,B=102,A=255)
        ReplacementPrimitive=none
    object end
    // Reference: DrawSoundRadiusComponent'Default__AmbientSoundSimpleToggleable.DrawSoundRadius0'
    Components(1)=DrawSoundRadius0
    begin object name=AudioComponent0 class=AudioComponent
        PreviewSoundRadius=DrawSoundRadiusComponent'Default__AmbientSoundSimpleToggleable.DrawSoundRadius0'
    object end
    // Reference: AudioComponent'Default__AmbientSoundSimpleToggleable.AudioComponent0'
    Components(2)=AudioComponent0
    bStatic=false
    bNoDelete=true
}