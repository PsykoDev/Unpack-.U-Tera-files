/*******************************************************************************
 * UIDataStore_OnlinePlayerData generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UIDataStore_OnlinePlayerData extends UIDataStore_Remote
    transient
    native(UIPrivate)
    config(Engine)
    hidecategories(Object,UIRoot);

var UIDataProvider_OnlineFriends FriendsProvider;
var int PlayerControllerId;
var string PlayerNick;
var config string ProfileSettingsClassName;
var class<OnlineProfileSettings> ProfileSettingsClass;
var UIDataProvider_OnlineProfileSettings ProfileProvider;
var config string ProfileProviderClassName;
var class<UIDataProvider_OnlineProfileSettings> ProfileProviderClass;
var config string PlayerStorageClassName;
var class<OnlinePlayerStorage> PlayerStorageClass;
var UIDataProvider_OnlinePlayerStorage StorageProvider;
var config string StorageProviderClassName;
var class<UIDataProvider_OnlinePlayerStorage> StorageProviderClass;
var UIDataProvider_OnlineFriendMessages FriendMessagesProvider;
var UIDataProvider_PlayerAchievements AchievementsProvider;
var config string FriendsProviderClassName;
var class<UIDataProvider_OnlineFriends> FriendsProviderClass;
var config string FriendMessagesProviderClassName;
var class<UIDataProvider_OnlineFriendMessages> FriendMessagesProviderClass;
var config string AchievementsProviderClassName;
var class<UIDataProvider_PlayerAchievements> AchievementsProviderClass;
var config string PartyChatProviderClassName;
var class<UIDataProvider_OnlinePartyChatList> PartyChatProviderClass;
var UIDataProvider_OnlinePartyChatList PartyChatProvider;

event OnRegister(LocalPlayer InPlayer)
{
    local OnlineSubsystem OnlineSub;
    local OnlinePlayerInterface PlayerInterface;

    // End:0x1F9
    if(InPlayer != none)
    {
        PlayerControllerId = InPlayer.ControllerId;
        OnlineSub = class'GameEngine'.static.GetOnlineSubsystem();
        // End:0x171
        if(OnlineSub != none)
        {
            PlayerInterface = OnlineSub.PlayerInterface;
            // End:0xE8
            if(NotEqual_InterfaceInterface(PlayerInterface, (none)))
            {
                PlayerInterface.AddLoginChangeDelegate(OnLoginChange);
            }
            // End:0x16E
            if(NotEqual_InterfaceInterface(OnlineSub.PlayerInterfaceEx, (none)))
            {
                OnlineSub.PlayerInterfaceEx.AddProfileDataChangedDelegate(byte(PlayerControllerId), OnPlayerDataChange);
            }
        }
        // End:0x1DA
        else
        {
            // End:0x1DA
            if((ProfileProvider != none) && ProfileProvider.Profile != none)
            {
                ProfileProvider.Profile.SetToDefaults();
            }
        }
        RegisterDelegates();
        OnLoginChange(byte(PlayerControllerId));
    }
    //return;    
}

event OnUnregister()
{
    local OnlineSubsystem OnlineSub;
    local OnlinePlayerInterface PlayerInterface;

    // End:0x154
    if(PlayerControllerId != -1)
    {
        ClearDelegates();
        OnlineSub = class'GameEngine'.static.GetOnlineSubsystem();
        // End:0x154
        if(OnlineSub != none)
        {
            PlayerInterface = OnlineSub.PlayerInterface;
            // End:0xCE
            if(NotEqual_InterfaceInterface(PlayerInterface, (none)))
            {
                PlayerInterface.ClearLoginChangeDelegate(OnLoginChange);
            }
            // End:0x154
            if(NotEqual_InterfaceInterface(OnlineSub.PlayerInterfaceEx, (none)))
            {
                OnlineSub.PlayerInterfaceEx.ClearProfileDataChangedDelegate(byte(PlayerControllerId), OnPlayerDataChange);
            }
        }
    }
    //return;    
}

function OnLoginChange(byte LocalUserNum)
{
    local OnlineSubsystem OnlineSub;
    local OnlinePlayerInterface PlayerInterface;

    // End:0x18B
    if(LocalUserNum == PlayerControllerId)
    {
        OnlineSub = class'GameEngine'.static.GetOnlineSubsystem();
        // End:0x17D
        if(OnlineSub != none)
        {
            PlayerInterface = OnlineSub.PlayerInterface;
            // End:0x109
            if(NotEqual_InterfaceInterface(PlayerInterface, (none)) && PlayerInterface.GetLoginStatus(byte(PlayerControllerId)) > 0)
            {
                PlayerNick = PlayerInterface.GetPlayerNickname(byte(PlayerControllerId));
            }
            // End:0x17D
            else
            {
                PlayerNick = "";
                ProfileProvider.Profile.SetToDefaults();
                StorageProvider.Profile.SetToDefaults();
            }
        }
        RefreshSubscribers();
    }
    //return;    
}

function OnPlayerDataChange()
{
    local OnlineSubsystem OnlineSub;

    OnlineSub = class'GameEngine'.static.GetOnlineSubsystem();
    // End:0xC5
    if(OnlineSub != none)
    {
        // End:0xC5
        if(NotEqual_InterfaceInterface(OnlineSub.PlayerInterface, (none)))
        {
            PlayerNick = OnlineSub.PlayerInterface.GetPlayerNickname(byte(PlayerControllerId));
            RefreshSubscribers();
        }
    }
    //return;    
}

function RegisterDelegates()
{
    //return;    
}

function ClearDelegates()
{
    //return;    
}

event OnlineProfileSettings GetCachedPlayerProfile(int ControllerId)
{
    local OnlineSubsystem OnlineSub;
    local OnlinePlayerInterface PlayerInterface;
    local OnlineProfileSettings Result;

    OnlineSub = class'GameEngine'.static.GetOnlineSubsystem();
    // End:0xB5
    if(OnlineSub != none)
    {
        PlayerInterface = OnlineSub.PlayerInterface;
        // End:0xB5
        if(NotEqual_InterfaceInterface(PlayerInterface, (none)))
        {
            Result = PlayerInterface.GetProfileSettings(byte(ControllerId));
        }
    }
    return Result;
    //return ReturnValue;    
}

event OnlinePlayerStorage GetCachedPlayerStorage(int ControllerId)
{
    local OnlineSubsystem OnlineSub;
    local OnlinePlayerInterface PlayerInterface;
    local OnlinePlayerStorage Result;

    OnlineSub = class'GameEngine'.static.GetOnlineSubsystem();
    // End:0xB5
    if(OnlineSub != none)
    {
        PlayerInterface = OnlineSub.PlayerInterface;
        // End:0xB5
        if(NotEqual_InterfaceInterface(PlayerInterface, (none)))
        {
            Result = PlayerInterface.GetPlayerStorage(byte(ControllerId));
        }
    }
    return Result;
    //return ReturnValue;    
}

defaultproperties
{
    PlayerControllerId=-1
    PlayerNick="PlayerNickNameHere"
    PartyChatProviderClassName="Engine.UIDataProvider_OnlinePartyChatList"
    Tag=OnlinePlayerData
}