/*******************************************************************************
 * NavigationPoint generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class NavigationPoint extends Actor
    native
    notplaceable
    hidecategories(Navigation,Lighting,LightColor,Force)
    classgroup(Navigation);

const INFINITE_PATH_COST = 10000000;

struct native NavigationOctreeObject
{
    var Box BoundingBox;
    var Vector BoxCenter;
    var native const transient Pointer OctreeNode;
    var const noexport Object Owner;
    var const noexport byte OwnerType;

    structdefaultproperties
    {
        BoundingBox=(Min=(X=0.0,Y=0.0,Z=0.0),Max=(X=0.0,Y=0.0,Z=0.0),IsValid=0)
        BoxCenter=(X=0.0,Y=0.0,Z=0.0)
        Owner=none
        OwnerType=0
    }
};

struct native DebugNavCost
{
    var string Desc;
    var int Cost;

    structdefaultproperties
    {
        Desc=""
        Cost=0
    }
};

struct CheckpointRecord
{
    var bool bDisabled;
    var bool bBlocked;

    structdefaultproperties
    {
        bDisabled=false
        bBlocked=false
    }
};

var transient bool bEndPoint;
var transient bool bTransientEndPoint;
var transient bool bHideEditorPaths;
var transient bool bCanReach;
/** this node is currently unuseable */
var() bool bBlocked;
/** reachspecs from this path only in the direction the path is facing (180 degrees) */
var() bool bOneWayPath;
var bool bNeverUseStrafing;
var bool bAlwaysUseStrafing;
var const bool bForceNoStrafing;
var const bool bAutoBuilt;
var bool bSpecialMove;
var bool bNoAutoConnect;
var const bool bNotBased;
var const bool bPathsChanged;
/** used by path building - means no automatically generated paths are sourced from this node */
var() bool bDestinationOnly;
var bool bSourceOnly;
var bool bSpecialForced;
var bool bMustBeReachable;
var bool bBlockable;
var bool bFlyingPreferred;
var bool bMayCausePain;
var transient bool bAlreadyVisited;
/** if true, forced paths to this node will have max width to accomodate vehicles */
var() bool bVehicleDestination;
var() bool bMakeSourceOnly;
var bool bMustTouchToReach;
var bool bCanWalkOnToReach;
var bool bBuildLongPaths;
/** indicates vehicles cannot use this node */
var(VehicleUsage) bool bBlockedForVehicles;
/** vehicles with bUsePreferredVehiclePaths set (large vehicles, usually) will prioritize using these nodes */
var(VehicleUsage) bool bPreferredVehiclePath;
var const bool bHasCrossLevelPaths;
var transient bool bShouldSaveForCheckpoint;
var native const transient NavigationOctreeObject NavOctreeObject;
/** List of navigation points to prevent paths being built to */
var() duplicatetransient const editconst array<editconst editinline ReachSpec> PathList;
var duplicatetransient editoronly array<editoronly ActorReference> EditorProscribedPaths;
var duplicatetransient editoronly array<editoronly ActorReference> EditorForcedPaths;
/** List of volumes containing this navigation point relevant for gameplay */
var() const editconst array<editconst ActorReference> Volumes;
var int visitedWeight;
var const int bestPathWeight;
var private const NavigationPoint nextNavigationPoint;
var const NavigationPoint nextOrdered;
var const NavigationPoint prevOrdered;
var const NavigationPoint previousPath;
var int Cost;
/** Extra weight added by level designer */
var() int ExtraCost;
var transient int TransientCost;
var transient int FearCost;
var transient array<DebugNavCost> CostArray;
var DroppedPickup InventoryCache;
var float InventoryDist;
var const float LastDetourWeight;
var export editinline CylinderComponent CylinderComponent;
/** path size of the largest ReachSpec in this node's PathList */
var() const editconst Cylinder MaxPathSize;
/** GUID used for linking paths across levels */
var() duplicatetransient const editconst Guid NavGuid;
var const export editinline transient SpriteComponent GoodSprite;
var const export editinline transient SpriteComponent BadSprite;
/** Which navigation network does this navigation point connect to? */
var() const editconst int NetworkID;
var transient Pawn AnchoredPawn;
var transient float LastAnchoredPawnTime;

// Export UNavigationPoint::execGetBoundingCylinder(FFrame&, void* const)
native function GetBoundingCylinder(out float CollisionRadius, out float CollisionHeight);

// Export UNavigationPoint::execGetReachSpecTo(FFrame&, void* const)
native final function ReachSpec GetReachSpecTo(NavigationPoint Nav, optional class<ReachSpec> SpecClass);

// Export UNavigationPoint::execIsUsableAnchorFor(FFrame&, void* const)
native function bool IsUsableAnchorFor(Pawn P);

// Export UNavigationPoint::execCanTeleport(FFrame&, void* const)
native function bool CanTeleport(Actor A);

event int SpecialCost(Pawn Seeker, ReachSpec Path)
{
    //return ReturnValue;    
}

event bool Accept(Actor Incoming, Actor Source)
{
    local bool bResult;

    bResult = Incoming.SetLocation(Location);
    // End:0x86
    if(bResult)
    {
        Incoming.Velocity = vect(0.0, 0.0, 0.0);
        Incoming.SetRotation(Rotation);
    }
    Incoming.PlayTeleportEffect(true, false);
    return bResult;
    //return ReturnValue;    
}

event float DetourWeight(Pawn Other, float PathWeight)
{
    //return ReturnValue;    
}

event bool SuggestMovePreparation(Pawn Other)
{
    return Other.SpecialMoveTo(Other.Anchor, self, Other.Controller.MoveTarget);
    //return ReturnValue;    
}

function bool ProceedWithMove(Pawn Other)
{
    return true;
    //return ReturnValue;    
}

static final function NavigationPoint GetNearestNavToActor(Actor ChkActor, optional class<NavigationPoint> RequiredClass, optional array<NavigationPoint> ExcludeList, optional float MinDist)
{
    local NavigationPoint Nav, BestNav;
    local float Dist, bestDist;

    // End:0x16B
    if(ChkActor != none)
    {
        // End:0x16A
        foreach ChkActor.WorldInfo.AllNavigationPoints(class'NavigationPoint', Nav)
        {
            // End:0x169
            if(((RequiredClass == none) || Nav.Class == RequiredClass) && ExcludeList.Find(Nav) == -1)
            {
                Dist = VSize(Nav.Location - ChkActor.Location);
                // End:0x169
                if(Dist > MinDist)
                {
                    // End:0x169
                    if((BestNav == none) || Dist < bestDist)
                    {
                        BestNav = Nav;
                        bestDist = Dist;
                    }
                }
            }            
        }        
    }
    return BestNav;
    //return ReturnValue;    
}

static final function NavigationPoint GetNearestNavToPoint(Actor ChkActor, Vector ChkPoint, optional class<NavigationPoint> RequiredClass, optional array<NavigationPoint> ExcludeList)
{
    local NavigationPoint Nav, BestNav;
    local float Dist, bestDist;

    // End:0x13E
    if(ChkActor != none)
    {
        // End:0x13D
        foreach ChkActor.WorldInfo.AllNavigationPoints(class'NavigationPoint', Nav)
        {
            // End:0x13C
            if(((RequiredClass == none) || Nav.Class == RequiredClass) && ExcludeList.Find(Nav) == -1)
            {
                Dist = VSize(Nav.Location - ChkPoint);
                // End:0x13C
                if((BestNav == none) || Dist < bestDist)
                {
                    BestNav = Nav;
                    bestDist = Dist;
                }
            }            
        }        
    }
    return BestNav;
    //return ReturnValue;    
}

// Export UNavigationPoint::execGetAllNavInRadius(FFrame&, void* const)
native static final function bool GetAllNavInRadius(Actor ChkActor, Vector ChkPoint, float Radius, out array<NavigationPoint> out_NavList, optional bool bSkipBlocked, optional int inNetworkID, optional Cylinder MinSize)
{
    inNetworkID = -1;                                        
}

// Export UNavigationPoint::execIsOnDifferentNetwork(FFrame&, void* const)
native final function bool IsOnDifferentNetwork(NavigationPoint Nav);

function OnToggle(SeqAct_Toggle InAction)
{
    // End:0x46
    if(InAction.InputLinks[0].bHasImpulse)
    {
        bBlocked = false;
    }
    // End:0xDB
    else
    {
        // End:0x8C
        if(InAction.InputLinks[1].bHasImpulse)
        {
            bBlocked = true;
        }
        // End:0xDB
        else
        {
            // End:0xDB
            if(InAction.InputLinks[2].bHasImpulse)
            {
                bBlocked = !bBlocked;
            }
        }
    }
    WorldInfo.Game.NotifyNavigationChanged(self);
    bShouldSaveForCheckpoint = true;
    //return;    
}

simulated event ShutDown()
{
    super.ShutDown();
    bBlocked = true;
    WorldInfo.Game.NotifyNavigationChanged(self);
    bShouldSaveForCheckpoint = true;
    //return;    
}

function bool ShouldSaveForCheckpoint()
{
    return bShouldSaveForCheckpoint;
    //return ReturnValue;    
}

function CreateCheckpointRecord(out CheckpointRecord Record)
{
    Record.bBlocked = bBlocked;
    //return;    
}

function ApplyCheckpointRecord(const out CheckpointRecord Record)
{
    bBlocked = Record.bBlocked;
    bShouldSaveForCheckpoint = true;
    //return;    
}

simulated event string GetDebugAbbrev()
{
    return "NP?";
    //return ReturnValue;    
}

defaultproperties
{
    bMayCausePain=true
    bMustTouchToReach=true
    bBuildLongPaths=true
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionHeight=50.0
        CollisionRadius=50.0
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__NavigationPoint.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        Sprite=Texture2D'EditorResources.S_NavP'
        SpriteCategoryName=Navigation
        ReplacementPrimitive=none
        HiddenGame=true
        AlwaysLoadOnClient=false
        AlwaysLoadOnServer=false
    object end
    // Reference: SpriteComponent'Default__NavigationPoint.Sprite'
    GoodSprite=Sprite
    begin object name=Sprite2 class=SpriteComponent
        Sprite=Texture2D'EditorResources.Bad'
        SpriteCategoryName=Navigation
        ReplacementPrimitive=none
        HiddenGame=true
        HiddenEditor=true
        AlwaysLoadOnClient=false
        AlwaysLoadOnServer=false
        Scale=0.250
    object end
    // Reference: SpriteComponent'Default__NavigationPoint.Sprite2'
    BadSprite=Sprite2
    NetworkID=-1
    begin object name=Sprite class=SpriteComponent
        Sprite=Texture2D'EditorResources.S_NavP'
        SpriteCategoryName=Navigation
        ReplacementPrimitive=none
        HiddenGame=true
        AlwaysLoadOnClient=false
        AlwaysLoadOnServer=false
    object end
    // Reference: SpriteComponent'Default__NavigationPoint.Sprite'
    Components(0)=Sprite
    begin object name=Sprite2 class=SpriteComponent
        Sprite=Texture2D'EditorResources.Bad'
        SpriteCategoryName=Navigation
        ReplacementPrimitive=none
        HiddenGame=true
        HiddenEditor=true
        AlwaysLoadOnClient=false
        AlwaysLoadOnServer=false
        Scale=0.250
    object end
    // Reference: SpriteComponent'Default__NavigationPoint.Sprite2'
    Components(1)=Sprite2
    begin object name=Arrow class=ArrowComponent
        ArrowColor=(R=150,G=200,B=255,A=255)
        ArrowSize=0.50
        bTreatAsASprite=true
        SpriteCategoryName=Navigation
        ReplacementPrimitive=none
    object end
    // Reference: ArrowComponent'Default__NavigationPoint.Arrow'
    Components(2)=Arrow
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionHeight=50.0
        CollisionRadius=50.0
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__NavigationPoint.CollisionCylinder'
    Components(3)=CollisionCylinder
    begin object name=PathRenderer class=PathRenderingComponent
        ReplacementPrimitive=none
    object end
    // Reference: PathRenderingComponent'Default__NavigationPoint.PathRenderer'
    Components(4)=PathRenderer
    bStatic=true
    bNoDelete=true
    bCollideWhenPlacing=true
    bForceAllowKismetModification=true
    begin object name=CollisionCylinder class=CylinderComponent
        CollisionHeight=50.0
        CollisionRadius=50.0
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__NavigationPoint.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}