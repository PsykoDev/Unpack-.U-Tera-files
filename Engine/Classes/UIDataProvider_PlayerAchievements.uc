/*******************************************************************************
 * UIDataProvider_PlayerAchievements generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class UIDataProvider_PlayerAchievements extends UIDataProvider_OnlinePlayerDataBase
    transient
    native(UIPrivate)
    config(Engine)
    hidecategories(Object,UIRoot);

var transient array<AchievementDetails> Achievements;

// Export UUIDataProvider_PlayerAchievements::execGetTotalGamerScore(FFrame&, void* const)
native final function int GetTotalGamerScore();

// Export UUIDataProvider_PlayerAchievements::execGetMaxTotalGamerScore(FFrame&, void* const)
native final function int GetMaxTotalGamerScore();

function PopulateAchievementIcons()
{
    //return;    
}

function string GetAchievementIconPathName(int AchievementId, optional bool bReturnLockedIcon)
{
    //return ReturnValue;    
}

function GetAchievementDetails(const int AchievementId, out AchievementDetails OutAchievementDetails)
{
    local int Index;

    Index = Achievements.Find('Id', AchievementId);
    // End:0x59
    if(Index != -1)
    {
        OutAchievementDetails = Achievements[Index];
    }
    //return;    
}

function OnPlayerAchievementsChanged(int TitleId)
{
    local OnlineSubsystem OnlineSub;
    local OnlineSubsystem.EOnlineEnumerationReadState Result;

    // End:0x10D
    if(PlayerControllerId != -1)
    {
        OnlineSub = class'GameEngine'.static.GetOnlineSubsystem();
        // End:0x10D
        if(((OnlineSub != none) && NotEqual_InterfaceInterface(OnlineSub.PlayerInterface, (none))) && TitleId == 0)
        {
            Result = OnlineSub.PlayerInterface.GetAchievements(byte(PlayerControllerId), Achievements, TitleId);
            // End:0x10D
            if(Result == 2)
            {
                PopulateAchievementIcons();
            }
        }
    }
    //return;    
}

function OnPlayerAchievementUnlocked(bool bWasSuccessful)
{
    // End:0x17
    if(bWasSuccessful)
    {
        UpdateAchievements();
    }
    //return;    
}

event OnRegister(LocalPlayer InPlayer)
{
    local OnlineSubsystem OnlineSub;

    super.OnRegister(InPlayer);
    // End:0x185
    if(PlayerControllerId != -1)
    {
        OnlineSub = class'GameEngine'.static.GetOnlineSubsystem();
        // End:0x185
        if(OnlineSub != none)
        {
            // End:0x185
            if(NotEqual_InterfaceInterface(OnlineSub.PlayerInterface, (none)))
            {
                OnlineSub.PlayerInterface.AddLoginChangeDelegate(OnLoginChange);
                OnlineSub.PlayerInterface.AddReadAchievementsCompleteDelegate(byte(PlayerControllerId), OnPlayerAchievementsChanged);
                OnlineSub.PlayerInterface.AddUnlockAchievementCompleteDelegate(byte(PlayerControllerId), OnPlayerAchievementUnlocked);
                UpdateAchievements();
            }
        }
    }
    //return;    
}

event OnUnregister()
{
    local OnlineSubsystem OnlineSub;

    OnlineSub = class'GameEngine'.static.GetOnlineSubsystem();
    // End:0x18A
    if(OnlineSub != none)
    {
        // End:0xB3
        if(NotEqual_InterfaceInterface(OnlineSub.PlayerInterface, (none)))
        {
            OnlineSub.PlayerInterface.ClearLoginChangeDelegate(OnLoginChange);
        }
        // End:0x18A
        if(NotEqual_InterfaceInterface(OnlineSub.PlayerInterface, (none)))
        {
            OnlineSub.PlayerInterface.ClearUnlockAchievementCompleteDelegate(byte(PlayerControllerId), OnPlayerAchievementUnlocked);
            OnlineSub.PlayerInterface.ClearReadAchievementsCompleteDelegate(byte(PlayerControllerId), OnPlayerAchievementsChanged);
        }
    }
    Achievements.Length = 0;
    super.OnUnregister();
    //return;    
}

function OnLoginChange(byte LocalUserNum)
{
    // End:0x23
    if(LocalUserNum == PlayerControllerId)
    {
        UpdateAchievements();
    }
    //return;    
}

function UpdateAchievements()
{
    local OnlineSubsystem OnlineSub;

    // End:0x165
    if(PlayerControllerId != -1)
    {
        Achievements.Length = 0;
        OnlineSub = class'GameEngine'.static.GetOnlineSubsystem();
        // End:0x165
        if((((OnlineSub != none) && NotEqual_InterfaceInterface(OnlineSub.PlayerInterface, (none))) && OnlineSub.PlayerInterface.GetLoginStatus(byte(PlayerControllerId)) > 0) && !OnlineSub.PlayerInterface.IsGuestLogin(byte(PlayerControllerId)))
        {
            OnlineSub.PlayerInterface.ReadAchievements(byte(PlayerControllerId));
        }
    }
    //return;    
}
