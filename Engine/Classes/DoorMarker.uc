/*******************************************************************************
 * DoorMarker generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class DoorMarker extends NavigationPoint
    native
    placeable
    hidecategories(Navigation,Lighting,LightColor,Force);

enum EDoorType
{
    DOOR_Shoot,
    DOOR_Touch,
    DOOR_MAX
};

/** the door mover associated with this marker */
var() InterpActor MyDoor;
/** how do we open this door? */
var() DoorMarker.EDoorType DoorType;
/** trigger for the door; if specified, the opening action will be done to the trigger instead of the door */
var() Actor DoorTrigger;
/** if true, AI should wait until the door has completely finished opening before trying to move through */
var() bool bWaitUntilCompletelyOpened;
/** if true, means that the initial position of the mover blocks navigation */
var() bool bInitiallyClosed;
/** if true, don't even try to go through this path if door is closed */
var() bool bBlockedWhenClosed;
var bool bDoorOpen;
var const transient bool bTempDisabledCollision;

event PostBeginPlay()
{
    bBlocked = bInitiallyClosed && bBlockedWhenClosed;
    bDoorOpen = !bInitiallyClosed;
    super(Actor).PostBeginPlay();
    //return;    
}

function MoverOpened()
{
    bBlocked = !bInitiallyClosed && bBlockedWhenClosed;
    bDoorOpen = bInitiallyClosed;
    WorldInfo.Game.NotifyNavigationChanged(self);
    //return;    
}

function MoverClosed()
{
    bBlocked = bInitiallyClosed && bBlockedWhenClosed;
    bDoorOpen = !bInitiallyClosed;
    WorldInfo.Game.NotifyNavigationChanged(self);
    //return;    
}

event Actor SpecialHandling(Pawn Other)
{
    local Actor TouchActor;

    // End:0x6A
    if((bDoorOpen || MyDoor == none) || bInitiallyClosed == (bDoorOpen || VSizeSq(MyDoor.Velocity) > 1.0))
    {
        return self;
    }
    // End:0xFD
    else
    {
        // End:0xFB
        if(DoorType == 1)
        {
            // End:0x9A
            if(DoorTrigger == none)
            {
                return MyDoor;
            }
            // End:0xF8
            else
            {
                TouchActor = DoorTrigger.SpecialHandling(Other);
                // End:0xEE
                if(TouchActor == none)
                {
                    TouchActor = DoorTrigger;
                }
                return TouchActor;
            }
        }
        // End:0xFD
        else
        {
            return self;
        }
    }
    //return ReturnValue;    
}

function bool ProceedWithMove(Pawn Other)
{
    // End:0x8B
    if((DoorType == 0) && Other.Controller.Focus == MyDoor)
    {
        Other.Controller.StopFiring();
    }
    // End:0xB0
    if(bDoorOpen || DoorType != 0)
    {
        return true;
    }
    Other.Controller.Focus = ((DoorTrigger != none) ? DoorTrigger : MyDoor);
    // End:0x1AF
    if(!Other.Controller.FireWeaponAt(Other.Controller.Focus))
    {
        Other.Controller.MoveTimer = 0.250;
    }
    // End:0x1F9
    else
    {
        // End:0x1F9
        if(bWaitUntilCompletelyOpened)
        {
            Other.Controller.WaitForMover(MyDoor);
        }
    }
    return false;
    //return ReturnValue;    
}

event bool SuggestMovePreparation(Pawn Other)
{
    // End:0x23
    if(bDoorOpen || MyDoor == none)
    {
        return false;
    }
    // End:0x41A
    else
    {
        // End:0x8F
        if(VSizeSq(MyDoor.Velocity) > 1.0)
        {
            Other.Controller.WaitForMover(MyDoor);
            return true;
        }
        // End:0x41A
        else
        {
            // End:0x264
            if(DoorType == 0)
            {
                Other.Controller.Focus = ((DoorTrigger != none) ? DoorTrigger : MyDoor);
                // End:0x1DA
                if(!Other.Controller.FireWeaponAt(Other.Controller.Focus))
                {
                    Other.Controller.MoveTimer = 0.250;
                    Other.Controller.bPreparingMove = true;
                    return true;
                }
                // End:0x261
                else
                {
                    // End:0x25F
                    if(bWaitUntilCompletelyOpened)
                    {
                        Other.Controller.WaitForMover(MyDoor);
                        Other.Controller.bPreparingMove = true;
                        return true;
                    }
                    // End:0x261
                    else
                    {
                        return false;
                    }
                }
            }
            // End:0x41A
            else
            {
                // End:0x418
                if(((DoorType == 1) && DoorTrigger != none) && Other.Controller.ActorReachable(DoorTrigger))
                {
                    // End:0x36C
                    if(Other.Controller.Focus == Other.Controller.MoveTarget)
                    {
                        Other.Controller.Focus = DoorTrigger;
                    }
                    Other.Controller.MoveTarget = DoorTrigger;
                    Other.Controller.CurrentPath = none;
                    Other.Controller.NextRoutePath = none;
                    return false;
                }
                // End:0x41A
                else
                {
                    return false;
                }
            }
        }
    }
    //return ReturnValue;    
}

defaultproperties
{
    bInitiallyClosed=true
    bSpecialMove=true
    ExtraCost=100
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__DoorMarker.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__DoorMarker.Sprite'
    GoodSprite=Sprite
    begin object name=Sprite2 class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__DoorMarker.Sprite2'
    BadSprite=Sprite2
    begin object name=Sprite class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__DoorMarker.Sprite'
    Components(0)=Sprite
    begin object name=Sprite2 class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__DoorMarker.Sprite2'
    Components(1)=Sprite2
    begin object name=Arrow class=ArrowComponent
        ReplacementPrimitive=none
    object end
    // Reference: ArrowComponent'Default__DoorMarker.Arrow'
    Components(2)=Arrow
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__DoorMarker.CollisionCylinder'
    Components(3)=CollisionCylinder
    begin object name=PathRenderer class=PathRenderingComponent
        ReplacementPrimitive=none
    object end
    // Reference: PathRenderingComponent'Default__DoorMarker.PathRenderer'
    Components(4)=PathRenderer
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__DoorMarker.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}