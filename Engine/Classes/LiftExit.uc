/*******************************************************************************
 * LiftExit generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class LiftExit extends NavigationPoint
    native
    placeable
    hidecategories(Navigation,Lighting,LightColor,Force);

var() LiftCenter MyLiftCenter;
/** if true, can only get off lift here. */
var() bool bExitOnly;

function bool CanBeReachedFromLiftBy(Pawn Other)
{
    return (Location.Z < (Other.Location.Z + Other.GetCollisionHeight())) && Other.LineOfSightTo(self);
    //return ReturnValue;    
}

function WaitForLift(Pawn Other)
{
    // End:0xAF
    if(MyLiftCenter != none)
    {
        Other.SetDesiredRotation(rotator(Location - Other.Location));
        Other.Controller.WaitForMover(MyLiftCenter.MyLift);
    }
    //return;    
}

event bool SuggestMovePreparation(Pawn Other)
{
    local Controller C;

    // End:0x37
    if((MyLiftCenter == none) || Other.Controller == none)
    {
        return false;
    }
    // End:0x10E
    if(Other.Physics == 4)
    {
        // End:0x10C
        if(Other.AirSpeed > float(0))
        {
            Other.Controller.MoveTimer = 2.0 + (VSize(Location - Other.Location) / Other.AirSpeed);
        }
        return false;
    }
    // End:0x1AC
    if((Other.Base == MyLiftCenter.Base) || Other.ReachedDestination(MyLiftCenter))
    {
        // End:0x194
        if(CanBeReachedFromLiftBy(Other))
        {
            return false;
        }
        WaitForLift(Other);
        return true;
    }
    // End:0x33C
    else
    {
        // End:0x33C
        if(MyLiftCenter != none)
        {
            // End:0x307
            foreach WorldInfo.AllControllers(class'Controller', C)
            {
                // End:0x306
                if((((C.Pawn != none) && C.PendingMover == MyLiftCenter.MyLift) && WorldInfo.GRI.OnSameTeam(C, Other.Controller)) && C.Pawn.ReachedDestination(self))
                {
                    WaitForLift(Other);                    
                    return true;
                }                
            }            
            Other.Controller.ReadyForLift();
        }
    }
    return false;
    //return ReturnValue;    
}

defaultproperties
{
    bNeverUseStrafing=true
    bForceNoStrafing=true
    bSpecialMove=true
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__LiftExit.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=Sprite class=SpriteComponent
        Sprite=Texture2D'EditorResources.lift_exit'
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__LiftExit.Sprite'
    GoodSprite=Sprite
    begin object name=Sprite2 class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__LiftExit.Sprite2'
    BadSprite=Sprite2
    begin object name=Sprite class=SpriteComponent
        Sprite=Texture2D'EditorResources.lift_exit'
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__LiftExit.Sprite'
    Components(0)=Sprite
    begin object name=Sprite2 class=SpriteComponent
        ReplacementPrimitive=none
    object end
    // Reference: SpriteComponent'Default__LiftExit.Sprite2'
    Components(1)=Sprite2
    begin object name=Arrow class=ArrowComponent
        ReplacementPrimitive=none
    object end
    // Reference: ArrowComponent'Default__LiftExit.Arrow'
    Components(2)=Arrow
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__LiftExit.CollisionCylinder'
    Components(3)=CollisionCylinder
    begin object name=PathRenderer class=PathRenderingComponent
        ReplacementPrimitive=none
    object end
    // Reference: PathRenderingComponent'Default__LiftExit.PathRenderer'
    Components(4)=PathRenderer
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__LiftExit.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}