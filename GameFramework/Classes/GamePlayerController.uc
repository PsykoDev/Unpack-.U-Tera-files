/*******************************************************************************
 * GamePlayerController generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class GamePlayerController extends PlayerController
    abstract
    native
    config(Game)
    hidecategories(Navigation);

var bool bWarnCrowdMembers;
/** If TRUE, draw debug info for crowd awareness checks */
var(Debug) bool bDebugCrowdAwareness;
var transient bool bIsWarmupPaused;
var float AgentAwareRadius;
var protected transient name CurrentSoundMode;

function OnToggleMouseCursor(SeqAct_ToggleMouseCursor InAction)
{
    local GameViewportClient GVC;

    GVC = ((LocalPlayer(Player) != none) ? LocalPlayer(Player).ViewportClient : none);
    // End:0xAE
    if(GVC != none)
    {
        GVC.SetHardwareMouseCursorVisibility(InAction.InputLinks[0].bHasImpulse);
    }
    //return;    
}

// Export UGamePlayerController::execGetUIPlayerIndex(FFrame&, void* const)
native function int GetUIPlayerIndex();

exec function CrowdDebug(bool bEnabled)
{
    local GameCrowdAgent GCA;
    local int I, AgentCount;
    local float DebugRadius;

    LogInternal(("CROWDDEBUG" @ string(myHUD)) @ string(bEnabled));
    myHUD.bShowOverlays = bEnabled;
    I = 0;
    J0x5F:
    // End:0x10C [Loop If]
    if(I < myHUD.PostRenderedActors.Length)
    {
        GCA = GameCrowdAgent(myHUD.PostRenderedActors[I]);
        // End:0xFE
        if(GCA != none)
        {
            myHUD.RemovePostRenderedActor(GCA);
        }
        ++ I;
        // [Loop Continue]
        goto J0x5F;
    }
    // End:0x240
    if(bEnabled)
    {
        DebugRadius = 2000.0;
        // End:0x18D
        foreach VisibleActors(class'GameCrowdAgent', GCA, DebugRadius, ((Pawn != none) ? Pawn.Location : Location))
        {
            ++ AgentCount;            
        }        
        // End:0x1BD
        if(AgentCount > 100)
        {
            DebugRadius *= Sqrt(100.0 / float(AgentCount));
        }
        // End:0x23F
        foreach VisibleActors(class'GameCrowdAgent', GCA, DebugRadius, ((Pawn != none) ? Pawn.Location : Location))
        {
            myHUD.AddPostRenderedActor(GCA);            
        }        
    }
    //return;    
}

event NotifyCrowdAgentRefresh()
{
    //return;    
}

event NotifyCrowdAgentInRadius(GameCrowdAgent Agent)
{
    //return;    
}

protected simulated function DoForceFeedbackForScreenShake(CameraShake ShakeData, float Scale)
{
    local int ShakeLevel;
    local float RotMag, LocMag, FOVMag;

    // End:0x2B5
    if(ShakeData != none)
    {
        RotMag = ShakeData.GetRotOscillationMagnitude() * Scale;
        // End:0x65
        if(RotMag > 40.0)
        {
            ShakeLevel = 2;
        }
        // End:0x83
        else
        {
            // End:0x83
            if(RotMag > 20.0)
            {
                ShakeLevel = 1;
            }
        }
        // End:0x19D
        if(ShakeLevel < 2)
        {
            LocMag = ShakeData.GetLocOscillationMagnitude() * Scale;
            // End:0xE9
            if(LocMag > 10.0)
            {
                ShakeLevel = 2;
            }
            // End:0x107
            else
            {
                // End:0x107
                if(LocMag > 5.0)
                {
                    ShakeLevel = 1;
                }
            }
            FOVMag = ShakeData.FOVOscillation.Amplitude * Scale;
            // End:0x19D
            if(ShakeLevel < 2)
            {
                // End:0x17F
                if(FOVMag > 5.0)
                {
                    ShakeLevel = 2;
                }
                // End:0x19D
                else
                {
                    // End:0x19D
                    if(FOVMag > 2.0)
                    {
                        ShakeLevel = 1;
                    }
                }
            }
        }
        // End:0x22B
        if(ShakeLevel == 2)
        {
            // End:0x1FF
            if(ShakeData.OscillationDuration <= float(1))
            {
                ClientPlayForceFeedbackWaveform(class'GameWaveForms'.default.CameraShakeBigShort);
            }
            // End:0x228
            else
            {
                ClientPlayForceFeedbackWaveform(class'GameWaveForms'.default.CameraShakeBigLong);
            }
        }
        // End:0x2B5
        else
        {
            // End:0x2B5
            if(ShakeLevel == 1)
            {
                // End:0x28C
                if(ShakeData.OscillationDuration <= float(1))
                {
                    ClientPlayForceFeedbackWaveform(class'GameWaveForms'.default.CameraShakeMediumShort);
                }
                // End:0x2B5
                else
                {
                    ClientPlayForceFeedbackWaveform(class'GameWaveForms'.default.CameraShakeMediumLong);
                }
            }
        }
    }
    //return;    
}

simulated function SetSoundMode(name InSoundModeName)
{
    local AudioDevice Audio;
    local bool bSet;

    Audio = class'Engine'.static.GetAudioDevice();
    // End:0xA5
    if(Audio != none)
    {
        // End:0xA5
        if(CurrentSoundMode != InSoundModeName)
        {
            bSet = Audio.super(GamePlayerController).SetSoundMode(InSoundModeName);
            // End:0xA5
            if(bSet == true)
            {
                CurrentSoundMode = InSoundModeName;
            }
        }
    }
    //return;    
}

// Export UGamePlayerController::execShowLoadingMovie(FFrame&, void* const)
native static final function ShowLoadingMovie(bool bShowMovie, optional bool bPauseAfterHide, optional float PauseDuration, optional float KeepPlayingDuration, optional bool bOverridePreviousDelays);

// Export UGamePlayerController::execKeepPlayingLoadingMovie(FFrame&, void* const)
native static final function KeepPlayingLoadingMovie();

// Export UGamePlayerController::execClientPlayMovie(FFrame&, void* const)
reliable client native final simulated event ClientPlayMovie(string MovieName, int InStartOfRenderingMovieFrame, int InEndOfRenderingMovieFrame, bool bRestrictPausing, bool bPlayOnceFromStream, bool bOnlyBackButtonSkipsMovie);

// Export UGamePlayerController::execClientStopMovie(FFrame&, void* const)
reliable client native final simulated event ClientStopMovie(float DelayInSeconds, bool bAllowMovieToFinish, bool bForceStopNonSkippable, bool bForceStopLoadingMovie);

// Export UGamePlayerController::execGetCurrentMovie(FFrame&, void* const)
native final function GetCurrentMovie(out string MovieName);

function bool CanUnpauseWarmup()
{
    return !bIsWarmupPaused;
    //return ReturnValue;    
}

event WarmupPause(bool bDesiredPauseState)
{
    local Color FadeColor;
    local PlayerController PC;
    local string MovieName;

    bIsWarmupPaused = bDesiredPauseState;
    SetPause(false, CanUnpauseWarmup);
    // End:0xBE
    if(!bDesiredPauseState)
    {
        GetCurrentMovie(MovieName);
        // End:0xBE
        if(MovieName != "")
        {
            // End:0xBD
            foreach LocalPlayerControllers(class'PlayerController', PC)
            {
                GamePlayerController(PC).ClientColorFade(FadeColor, 255, 0, 2.0);                
            }            
        }
    }
    //return;    
}

reliable client simulated function ClientColorFade(Color FadeColor, byte FromAlpha, byte ToAlpha, float FadeTime)
{
    //return;    
}

defaultproperties
{
    AgentAwareRadius=200.0
    CheatClass=class'GameCheatManager'
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__GamePlayerController.CollisionCylinder'
    CylinderComponent=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__GamePlayerController.CollisionCylinder'
    Components(0)=CollisionCylinder
    begin object name=CollisionCylinder class=CylinderComponent
        ReplacementPrimitive=none
    object end
    // Reference: CylinderComponent'Default__GamePlayerController.CollisionCylinder'
    CollisionComponent=CollisionCylinder
}