/*******************************************************************************
 * GameAIController generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class GameAIController extends AIController
    abstract
    native
    config(Game)
    hidecategories(Navigation);

/** Current command stack, with the last element being the currently active (ticked) one */
var() const editinline transient GameAICommand CommandList;
var transient bool bHasRunawayCommandList;
var(Debug) config bool bAILogging;
var(Debug) config bool bAILogToWindow;
var(Debug) config bool bFlushAILogEachLine;
var(Debug) config bool bMapBasedLogName;
var(Debug) config bool bAIDrawDebug;
var transient bool bAIBroken;
var transient FileLog AILogFile;
var(Debug) float DebugTextMaxLen;
var(Debug) const transient array<AICmdHistoryItem> CommandHistory;
var(Debug) config int CommandHistoryNum;
/** List of categories to filter */
var(Debug) config array<config name> AILogFilter;
var string DemoActionString;

replication
{
    // Pos:0x000
    if(bDemoRecording)
        DemoActionString
}

// Export UGameAIController::execAllCommands(FFrame&, void* const)
native final iterator function AllCommands(class<GameAICommand> BaseClass, out GameAICommand Cmd);

// Export UGameAIController::execPushCommand(FFrame&, void* const)
native function PushCommand(GameAICommand NewCommand);

// Export UGameAIController::execPopCommand(FFrame&, void* const)
native function PopCommand(GameAICommand ToBePoppedCommand);

// Export UGameAIController::execAbortCommand(FFrame&, void* const)
native function bool AbortCommand(GameAICommand AbortCmd, optional class<GameAICommand> AbortClass);

// Export UGameAIController::execGetActiveCommand(FFrame&, void* const)
native final function GameAICommand GetActiveCommand();

// Export UGameAIController::execCheckCommandCount(FFrame&, void* const)
native final function CheckCommandCount();

// Export UGameAIController::execDumpCommandStack(FFrame&, void* const)
native final function DumpCommandStack();

// Export UGameAIController::execFindCommandOfClass(FFrame&, void* const)
native final function GameAICommand FindCommandOfClass(class<GameAICommand> SearchClass);

// Export UGameAIController::execGetAICommandInStack(FFrame&, void* const)
native function GameAICommand GetAICommandInStack(const class<GameAICommand> InClass);

function float GetDestinationOffset()
{
    //return ReturnValue;    
}

function ReachedMoveGoal()
{
    //return;    
}

function ReachedIntermediateMoveGoal()
{
    //return;    
}

event Destroyed()
{
    super(Controller).Destroyed();
    // End:0x31
    if(AILogFile != none)
    {
        AILogFile.Destroy();
    }
    // End:0x54
    if(CommandList != none)
    {
        AbortCommand(CommandList);
    }
    //return;    
}

protected function RecordDemoAILog(coerce string LogText)
{
    //return;    
}

event AILog_Internal(coerce string LogText, optional name LogCategory, optional bool bForce)
{
    local int Idx;
    local string ActionStr, FinalStr, Filename;
    local GameAICommand ActiveCommand;
    local int FileNameLength;
    local Engine Eng;

    Eng = class'Engine'.static.GetEngine();
    // End:0x4F
    if(Eng.bDisableAILogging)
    {
        return;
    }
    // End:0x71
    if(!bForce && !bAILogging)
    {
        return;
    }
    // End:0x97
    if(WorldInfo.IsConsoleBuild(2))
    {
        return;
    }
    // End:0xFA
    if(!bForce)
    {
        Idx = 0;
        J0xB1:
        // End:0xFA [Loop If]
        if(Idx < AILogFilter.Length)
        {
            // End:0xEC
            if(AILogFilter[Idx] == LogCategory)
            {
                return;
            }
            ++ Idx;
            // [Loop Continue]
            goto J0xB1;
        }
    }
    // End:0x2BE
    if(AILogFile == none)
    {
        AILogFile = Spawn(class'FileLog');
        // End:0x18D
        if(bMapBasedLogName)
        {
            Filename = (WorldInfo.GetMapName() $ "_") $ string(self);
            Filename = Repl(Filename, "ai_", "", false);
        }
        // End:0x19A
        else
        {
            Filename = string(self);
        }
        // End:0x216
        if(class'WorldInfo'.static.GetWorldInfo().IsConsoleBuild() == true)
        {
            FileNameLength = Len(Filename) + 6;
            // End:0x216
            if(FileNameLength > 40)
            {
                Filename = Right(Filename, 34);
            }
        }
        AILogFile.bKillDuringLevelTransition = true;
        AILogFile.bFlushEachWrite = bFlushAILogEachLine;
        AILogFile.bWantsAsyncWrites = !bFlushAILogEachLine;
        AILogFile.OpenLog(Filename, ".ailog");
    }
    ActionStr = string(GetStateName());
    ActiveCommand = GetActiveCommand();
    // End:0x33B
    if(ActiveCommand != none)
    {
        ActionStr = (string(ActiveCommand.Class) $ ":") $ string(ActiveCommand.GetStateName());
    }
    FinalStr = (((("[" $ string(WorldInfo.TimeSeconds)) $ "]") @ ActionStr) $ ":") @ LogText;
    AILogFile.Logf(FinalStr);
    // End:0x3E7
    if(WorldInfo.IsRecordingDemo())
    {
        RecordDemoAILog(FinalStr);
    }
    // End:0x449
    if(bAILogToWindow)
    {
        LogInternal((((((string(Pawn) @ "[") $ string(WorldInfo.TimeSeconds)) $ "]") @ ActionStr) $ ":") @ LogText);
    }
    //return;    
}

function SetDesiredRotation(Rotator TargetDesiredRotation, optional bool InLockDesiredRotation, optional bool InUnlockWhenReached, optional float InterpolationTime)
{
    InLockDesiredRotation = false;
    InUnlockWhenReached = false;
    InterpolationTime = -1.0;
    // End:0x68
    if(Pawn != none)
    {
        Pawn.super(GameAIController).SetDesiredRotation(TargetDesiredRotation, InLockDesiredRotation, InUnlockWhenReached, InterpolationTime);
    }
    //return;    
}

final simulated event string GetActionString()
{
    local string ActionStr;
    local GameAICommand ActiveCmd;

    // End:0x2F
    if(WorldInfo.IsPlayingDemo())
    {
        return DemoActionString;
    }
    // End:0xCB
    else
    {
        ActiveCmd = GetActiveCommand();
        // End:0xA0
        if(ActiveCmd != none)
        {
            ActionStr = (string(ActiveCmd.Class) $ ":") $ string(ActiveCmd.GetStateName());
        }
        // End:0xC1
        else
        {
            ActionStr = (string(default.Class) $ ":") $ string(GetStateName());
        }
        return ActionStr;
    }
    //return ReturnValue;    
}

state DebugState
{
    function BeginState(name PreviousStateName)
    {
        // End:0x67
        if(!class'Engine'.static.GetEngine().bDisableAILogging)
        {
            AILog_Internal("BEGINSTATE" @ string(PreviousStateName), 'State');
        }
        //return;        
    }

    function EndState(name NextStateName)
    {
        // End:0x65
        if(!class'Engine'.static.GetEngine().bDisableAILogging)
        {
            AILog_Internal("ENDSTATE" @ string(NextStateName), 'State');
        }
        //return;        
    }

    function PushedState()
    {
        // End:0x56
        if(!class'Engine'.static.GetEngine().bDisableAILogging)
        {
            AILog_Internal("PUSHED", 'State');
        }
        //return;        
    }

    function PoppedState()
    {
        // End:0x56
        if(!class'Engine'.static.GetEngine().bDisableAILogging)
        {
            AILog_Internal("POPPED", 'State');
        }
        //return;        
    }

    function ContinuedState()
    {
        // End:0x59
        if(!class'Engine'.static.GetEngine().bDisableAILogging)
        {
            AILog_Internal("CONTINUED", 'State');
        }
        //return;        
    }

    function PausedState()
    {
        // End:0x56
        if(!class'Engine'.static.GetEngine().bDisableAILogging)
        {
            AILog_Internal("PAUSED", 'State');
        }
        //return;        
    }
    stop;    
}
